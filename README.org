#+TITLE: Emacs literate configuration
#+PROPERTY: header-args :tangle init.el :results none
#+OPTIONS: toc:nil num:nil
#+auto_tangle: t

* Emacs configuration
After spending lot of time with doom Emacs, willing to switch to a more native emacs config while keeping evil mode
* Header
Header for the config init.el file
#+begin_src emacs-lisp
    ;;; init.el --- Willydeliege's Emacs configuration -*- lexical-binding: t -*-

;; time the loading of the .emacs
;; keep this on top of your .emacs
(defvar *emacs-load-start* (current-time))
(defun anarcat/time-to-ms (time)
  (+ (* (+ (* (car time) (expt 2 16)) (car (cdr time))) 1000000) (car (cdr (cdr time)))))
(defun anarcat/display-timing ()
  (message "Emacs loaded in %fms" (/ (- (anarcat/time-to-ms (current-time)) (anarcat/time-to-ms *emacs-load-start*)) 1000000.0)))
(add-hook 'after-init-hook 'anarcat/display-timing t)

#+end_src

* Using straight properly with initiating in early-init.el
** early-init
:PROPERTIES:
:header-args: :tangle-mode o444 :results silent :tangle ~/.config/emacs/early-init.el
:END:
Emacs 27.0 introduced an early-init file. It allows customization before package and UI initialization.
#+begin_src emacs-lisp :lexical t
  ;;; early-init.el --- Emacs pre package.el & GUI configuration -*- lexical-binding: t; -*-
  ;;; Code:
#+end_src

#+begin_src emacs-lisp :lexical t
(setq package-enable-at-startup nil)
(setq inhibit-default-init nil)
#+end_src

#+begin_src emacs-lisp :lexical t
(setq native-comp-async-report-warnings-errors nil)
#+end_src

*** Debugging
Running this form will launch the debugger after loading a package.
This is useful for finding out when a dependency is requiring a package (perhaps earlier than you want).
Use by tangling this block and launching Emacs with =emacs --debug-init=.

#+begin_src emacs-lisp :var file="" :results silent :tangle no
(unless (string-empty-p file)
  (eval-after-load file
    '(debug)))
#+end_src

Similarly, this variable will hit the debugger when a message matches its regexp.
#+begin_src emacs-lisp :tangle no
(setq debug-on-message "")
#+end_src

Adding a variable watcher can be a useful way to track down initialization and mutation of a variable.
#+begin_src emacs-lisp :tangle no
(add-variable-watcher 'org-capture-after-finalize-hook
                      (lambda (symbol newval operation where)
                        (debug)
                        (message "%s set to %s" symbol newval)))
#+end_src

#+begin_src emacs-lisp :tangle no
(setq debug-on-error t)
#+end_src

*** file-name-handler-alist
Skipping a bunch of regular expression searching in the =file-name-handler-alist= should improve start time.
#+begin_src emacs-lisp :lexical t
(defvar default-file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)
#+end_src

*** Garbage Collection
=gc-cons-threshold= (800 KB) and =gc-cons-percentage= (0.1) control when the Emacs garbage collector can kick in.
Temporarily turning these off during init should decrease startup time.
Resetting them afterward will ensure that normal operations don't suffer from a large GC periods.

The following is a table shows values from popular Emacs configurations.

| Distribution | gc-cons-threshold |
|--------------+-------------------|
| Default      |            800000 |
| Doom         |          16777216 |
| Spacemacs    |         100000000 |

#+begin_src emacs-lisp :lexical t
(setq gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 1)

(defun +gc-after-focus-change ()
  "Run GC when frame loses focus."
  (run-with-idle-timer
   5 nil
   (lambda () (unless (frame-focus-state) (garbage-collect)))))
#+end_src

#+begin_src emacs-lisp :lexical t
(defun +reset-init-values ()
  (run-with-idle-timer
   1 nil
   (lambda ()
     (setq file-name-handler-alist default-file-name-handler-alist
           gc-cons-percentage 0.1
           gc-cons-threshold 100000000)
     (message "gc-cons-threshold & file-name-handler-alist restored")
     (when (boundp 'after-focus-change-function)
       (add-function :after after-focus-change-function #'+gc-after-focus-change)))))

(with-eval-after-load 'straghit
  (add-hook 'after-init-hook '+reset-init-values))
#+end_src

*** UI
Turning off these visual elements before UI initialization should speed up init.
#+begin_src emacs-lisp :lexical t
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)
#+end_src

Prevent instructions on how to close an emacsclient frame.
#+begin_src emacs-lisp :lexical t
(setq server-client-instructions nil)
#+end_src

Implicitly resizing the Emacs frame adds to init time.
Fonts larger than the system default can cause frame resizing, which adds to startup time.
#+begin_src emacs-lisp :lexical t
(setq frame-inhibit-implied-resize t)
#+end_src

Set default and backup fonts
#+begin_src emacs-lisp :lexical t
(push '(font . "FiraCode Nerd Font Propo-12") default-frame-alist)
(set-face-font 'default "JetBrainsMono NFM")
(set-face-font 'variable-pitch "DejaVu Sans")
(copy-face 'default 'fixed-pitch)
#+end_src
Ignore X resources.
#+begin_src emacs-lisp :lexical t
(advice-add #'x-apply-session-resources :override #'ignore)
#+end_src

Miscellaneous
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen .  maximized
))
#+end_src

Taken from:

[[https://github.com/vsemyonoff/emacsrc/blob/14649a5bafea99cc7e13e7d048e9d15aed7926ce/early-init.el]]

This helps with a bug I was hitting when using =desktop-save-mode='s =desktop-read=.
#+begin_src emacs-lisp :lexical t
(setq desktop-restore-forces-onscreen nil)
#+end_src

#+begin_src emacs-lisp :lexical t
(setq ring-bell-function #'ignore
      inhibit-startup-screen t)
#+end_src

*** provide early-init
#+begin_src emacs-lisp :lexical t
(provide 'early-init)
  ;;; early-init.el ends here
#+end_src

* Package manager
** straight
Using [[https://github.com/radian-software/straight.el#getting-started][straight]] as package manager
#+begin_src emacs-lisp
;; Tell straight.el about the profiles we are going to be using.
(setq straight-profiles
      '((nil . "default.el")
        ;; Packages which are pinned to a specific commit.
        (pinned . "pinned.el")))
#+end_src

#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

** USE-PACKAGE
*** We will use use-package
#+begin_src emacs-lisp
  (add-to-list 'load-path "/usr/share/emacs/site-lisp/org")
  (straight-use-package '(org :type built-in))
  (straight-use-package 'use-package)

#+end_src
*** and use straight by default
#+begin_src emacs-lisp
(setq straight-use-package-by-default t)
(defmacro use-feature (name &rest args)
  "Like `use-package' but with `straight-use-package-by-default' disabled.
  NAME and ARGS are in `use-package'."
  (declare (indent defun))
  `(use-package ,name
     :straight nil
     :ensure nil
     ,@args))
#+end_src

*** Keymap for straight.el
#+begin_src emacs-lisp
  (defalias 'straight-keymap (make-sparse-keymap))
  (defvar straight-map (symbol-function 'straight-keymap)
    "Global keymap for straights commands.")
  (define-key global-map (kbd "C-c M-p") 'straight-keymap)
  (use-feature straight
    :bind (:map straight-map
                ("u" . straight-use-package)
                ("r" . straight-get-recipe)
                ("P" . straight-pull-all)
                ("F" . straight-fetch-all)
                ("p" . straight-pull-package)
                ("f" . straight-fetch-package)
                ("v" . straight-visit-package)
                ("b" . straight-visit-package-website)))
#+end_src

* Personal information
#+begin_src emacs-lisp
(setq user-full-name "Frédéric Willem"
      user-mail-address "frederic.willem@gmail.com")
#+end_src

* Defaults
** Save place
#+begin_src emacs-lisp
;; Save the last place edited in files
(use-feature saveplace
  :config
  (save-place-mode 1)
  (setq save-place-file (locate-user-emacs-file "places" ".emacs-places")))
#+end_src

** Emacs
#+begin_src emacs-lisp
  (use-feature emacs
    :bind ("C-x C" . save-buffers-kill-emacs)
    :init
    (global-hl-line-mode)
    (global-visual-line-mode)
    (setq use-short-answers t)
    ;; (setq initial-major-mode 'org-mode)
    (require 'diary-lib)
    ;; utility keymapp
    (defvar ctrl-z-map (make-sparse-keymap))
    (add-hook 'after-save-hook
              'executable-make-buffer-file-executable-if-script-p)
    (global-set-key [(control ?z)] ctrl-z-map))
#+end_src

** Winner-mode
#+begin_src emacs-lisp
  (use-feature winner
    :hook (after-init . winner-mode)
    :bind (:map winner-mode-map
                ("C-\\" . winner-undo)
                ("C-|" . winner-redo))
    :config
    (keymap-unset winner-mode-map "C-c <left>")
    (keymap-unset winner-mode-map "C-c <right>"))
#+end_src

** Recentf
#+begin_src emacs-lisp
  (use-feature recentf
    :hook (emacs-startup .  recentf-mode)
    :config
    (setq recentf-max-menu-items 25)
    (setq recentf-max-saved-items 25)
    (add-to-list 'recentf-exclude "~/.config/emacs/.cache/treemacs-persist")
    (add-to-list 'recentf-exclude "^.*\\.org_archive$"))
#+end_src

** Line numbers
#+begin_src emacs-lisp
(use-feature display-line-numbers
  :hook ((text-mode prog-mode conf-mode) . display-line-numbers-mode)
  :config
  (setq-default display-line-numbers-type 'relative
                display-line-numbers-width 4))
#+end_src

** Display time in modeline
#+begin_src emacs-lisp
  (setq display-time-day-and-date t)
  (setq display-time-default-load-average nil)
  (setq display-time-24hr-format t)
  (display-time-mode)
#+end_src

** Defaults
#+begin_src emacs-lisp
(display-battery-mode 1)
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "brave")
(defvar my/uname (shell-command-to-string "uname -a"))
(global-prettify-symbols-mode)
(defun delete-visited-file (buffer-name)
  "Delete the file visited by the buffer named BUFFER-NAME."
  (interactive "bDelete file visited by buffer ")
  (let* ((buffer (get-buffer buffer-name))
         (filename (buffer-file-name buffer)))
    (when buffer
      (when (and filename
                 (file-exists-p filename))
        (delete-file filename))
      (kill-buffer buffer))))
(keymap-global-set "C-x D" 'delete-visited-file)
(defvar my/using-android (string-match "Android" my/uname))
#+end_src

** isearch
#+begin_src emacs-lisp
  (use-feature isearch
    :config
    (setq isearch-lazy-count t
          isearch-repeat-on-direction-change t
          isearch-wrap-pause 'no
          isearch-allow-prefix t))
#+end_src

** ispell
#+begin_src emacs-lisp
  (use-feature ispell
    ;; :custom
    ;; (ispell-dictionary "fr_FR,en_US,en_GB")
    :config
    (ispell-set-spellchecker-params))

#+end_src

** Help
*** Helpful
Better help buffer
#+begin_src emacs-lisp
(use-package helpful
  :init
  (setq helpful--view-literal t)
  :bind (("C-c C-." . helpful-at-point)
         ("C-h f" . helpful-callable)
         ("C-h v" . helpful-variable)
         ("C-h k" . helpful-key)
         ("C-h x" . helpful-command)))
#+end_src

*** Womanizer
#+begin_src emacs-lisp
(use-feature help
  :bind (:map help-map
              ("W" . woman)))
#+end_src

** Terminals
*** Vterm
#+begin_src emacs-lisp
  (use-package vterm
    :bind (:map project-prefix-map
                ("t" . project-vterm))
    :preface
    (defun project-vterm ()
      (interactive)
      (defvar vterm-buffer-name)
      (let* ((default-directory (project-root     (project-current t)))
             (vterm-buffer-name (project-prefixed-buffer-name "vterm"))
             (vterm-buffer (get-buffer vterm-buffer-name)))
        (if (and vterm-buffer (not current-prefix-arg))
            (pop-to-buffer vterm-buffer  (bound-and-true-p display-comint-buffer-action))
          (vterm))))
    :init
    (with-eval-after-load 'project
      (add-to-list 'project-switch-commands     '(project-vterm "Vterm") t))
    :hook (vterm-mode . puni-disable-puni-mode))
#+end_src

*** Meow-vterm
#+begin_src emacs-lisp
  (use-package meow-vterm
    :disabled t
     :straight (meow-vterm :host github :repo "accelbread/meow-vterm")
     :init
     (meow-vterm-enable))
#+end_src

*** Vterm toggle
#+begin_src emacs-lisp
(use-package vterm-toggle
  :bind (("C-c t t" . vterm-toggle)
         ("C-c t V" . vterm-toggle-cd)))
#+end_src

*** Multi vterm
Use vterm as multiplexer
#+begin_src emacs-lisp
(use-package multi-vterm
  :bind ( ("C-c t m" . multi-vterm)
          :map vterm-mode-map
          ("C-c t r" . multi-vterm-rename-buffer)
          ("C-c t n" . multi-vterm-next)
          ("C-c t p" . multi-vterm-prev))
  :config
  (define-key vterm-mode-map [return]  #'vterm-send-return)
  (setq vterm-keymap-exceptions nil))
#+end_src

*** Eshell
#+begin_src emacs-lisp
(use-feature eshell
  :bind ("C-c t e" . eshell))
(use-package eshell-vterm
  :hook (eshell-mode . eshell-vterm-mode)
  :after eshell
  :config)
#+end_src

*** Exec path
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :defer 5
    :config
    (exec-path-from-shell-initialize))
#+end_src

** Custom.el
see [[https://github.com/protesilaos/dotfiles/blob/master/emacs/.emacs.d/prot-emacs.org#44-the-initel-setting-to-send-custom-file-to-oblivion][Prot's advice on custom.el]]
#+begin_src emacs-lisp
;; Disable the damn thing by making it disposable.
(setq custom-file (make-temp-file "emacs-custom-"))
(defun my/open-custon-file ()
  "Open the custom file."
  (interactive)
  (find-file custom-file))
(keymap-global-set "C-x c" 'my/open-custon-file)
#+end_src

** Backup files
#+begin_src emacs-lisp
  (use-feature files
    :config
    (setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))

    ;; auto-save-mode doesn't create the path automatically!
    (make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)

    (setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
          auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))

    (setq create-lockfiles nil))
#+end_src

** GPG
#+begin_src emacs-lisp
  (use-feature epa-file
    :defer 1
    :config
    ;; (epa-file-enable)
    (setq epa-file-encrypt-to "frederic.willem@gmail.com")
    (setq epg-pinentry-mode 'loopback))
#+end_src

** Mini buffer
#+begin_src emacs-lisp
  (setq enable-recursive-minibuffers t)
  (minibuffer-depth-indicate-mode)
#+end_src

* Keys
** god mode
#+begin_src emacs-lisp
  (use-package god-mode
    ;; :disabled t
    :init
    (defun my-god-mode-update-cursor-type ()
      (setq cursor-type (if (or god-local-mode buffer-read-only) 'box 'bar)))

    (add-hook 'post-command-hook #'my-god-mode-update-cursor-type)
    (require 'god-mode-isearch)
    (define-key isearch-mode-map (kbd "<escape>") #'god-mode-isearch-activate)
    (define-key god-mode-isearch-map (kbd "<escape>") #'god-mode-isearch-disable)
    (god-mode)

    (add-to-list 'god-exempt-major-modes 'notmuch-hello-mode)
    (add-to-list 'god-exempt-major-modes 'notmuch-search-mode)
    (add-to-list 'god-exempt-major-modes 'notmuch-show-mode)
    (add-to-list 'god-exempt-major-modes 'notmuch-tree-mode)
    (add-to-list 'god-exempt-major-modes 'vterm-mode)

    (global-set-key (kbd "<escape>") #'god-local-mode)
    (global-set-key (kbd "M-]") #'god-local-mode)

    (define-key god-local-mode-map (kbd "[") #'backward-paragraph)
    (define-key god-local-mode-map (kbd "]") #'forward-paragraph)
    (define-key god-local-mode-map (kbd ".") #'repeat)
    (define-key god-local-mode-map (kbd "i") #'god-local-mode))
#+end_src
** which-key 
#+begin_src emacs-lisp
  (use-package which-key
    :init
    (setq which-key-side-window-max-height 17)
    (which-key-mode)
    :config
    (which-key-enable-god-mode-support))
#+end_src

** auto-minor-mode
#+begin_src emacs-lisp
  (use-package auto-minor-mode)
#+end_src
* Org mode
** Org basics
*** Org-mode
#+begin_src emacs-lisp
  (use-package org
    :hook (org-mode                . my/prettify)
    ;; :hook (server-after-make-frame . my/custom-agenda)
    :bind (("C-c l"               . org-store-link)
           ("C-c a"               . org-agenda)
           :map ctrl-z-map
           ("z"               . org-capture)
           :map org-mode-map
           ("C-c &"               . nil)
           ("C-<return>"          . org-insert-subheading)
           ("C-S-<return>"        . org-insert-todo-subheading)
           ("C-c C-&"             . org-mark-ring-goto)) ;; yasnippets conflict
    :custom
    (org-return-follows-link t)
    (org-agenda-skip-deadline-prewarning-if-scheduled t)
    (org-agenda-skip-timestamp-if-deadline-is-shown t)
    (org-agenda-restore-windows-after-quit t)
    (org-deadline-warning-days 5)
    (org-enforce-todo-dependencies t)

    :custom-face
    (org-agenda-date-weekend-today ((t (:inherit org-agenda-date
                                                 :underline t
                                                 :height 1.4))))
    (org-agenda-date-today ((t (:inherit org-agenda-date
                                         :underline t
                                         :height 1.4))))
    :init

  ;;;
    ;; Capture floating frame
    ;;
    ;; taken from: http://www.windley.com/archives/2010/12/capture_mode_and_emacs.shtml
  ;;;

    (defadvice org-capture-finalize
        (after delete-capture-frame activate)
      "Advise capture-finalize to close the frame"
      (if (equal "capture" (frame-parameter nil 'name))
          (delete-frame)))

    (defadvice org-capture-destroy
        (after delete-capture-frame activate)
      "Advise capture-destroy to close the frame"
      (if (equal "capture" (frame-parameter nil 'name))
          (delete-frame)))

    ;; make the frame contain a single window. by default org-capture
    ;; splits the window.
    (add-hook 'org-capture-mode-hook
              'delete-other-windows)

    (defadvice org-switch-to-buffer-other-window
        (after supress-window-splitting activate)
      "Delete the extra window if we're in a capture frame"
      (if (equal "capture" (frame-parameter nil 'name))
          (delete-other-windows)))

    (defun make-capture-frame ()
      "Create a new frame and run org-capture."
      (interactive)
      (make-frame '((name . "capture")
                    (width . 120)
                    (height . 15)))
      (select-frame-by-name "capture")
      (setq word-wrap 1)
      (setq truncate-lines nil)
      (org-capture))



    (defun my/prettify ()
      (setq prettify-symbols-alist '((":PROPERTIES:" . "⚙️")
                                     (":LOGBOOK:" . "☰")
                                     ("#+begin_src" . ?✎)
                                     ("#+end_src"   . ?□)
                                     ("DEADLINE:" . "📆")
                                     ("CLOCK:" . "⏳")
                                     ("SCHEDULED:"  . "🪟") ; It's a window - not a plus sign in a box
                                     (":END:" . "🔚" ))))
    (setq org-directory "~/org/")
    (setq org-startup-indented t)
    (setq org-attach-store-link-p 'file)
    (org-babel-do-load-languages 'org-babel-load-languages
                                 (append org-babel-load-languages
                                         '((shell     . t)
                                           (java      . t))))
    ;; (setq org-archive-default-command 'org-archive-to-archive-sibling)
    (setq org-confirm-babel-evaluate nil)
    (setq
     ;; Edit settings
     org-log-done 'time
     org-log-into-drawer t
     org-auto-align-tags nil
     org-tags-column 0
     org-fold-catch-invisible-edits 'show-and-error
     org-special-ctrl-a/e t
     org-insert-heading-respect-content t

     ;; Org styling, hide markup etc.
     org-hide-emphasis-markers t
     org-pretty-entities t
     org-ellipsis "…")
    (setq org-capture-templates `( ("p" "Protocol" entry
                                    (file+headline ,(concat org-directory "inbox.org") "Inbox")
                                    "* %:description\n Source:  %u, %:annotation \n#+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?" :immediate-finish t)
                                   ("L" "Protocol Link" entry
                                    (file+headline ,(concat org-directory "inbox.org") "Inbox")
                                    "* %? [[%:link][%:description]] \n Captured On: %U" :immediate-finish t)))
    

    (setq org-startup-folded 'show2levels)

    ;; make org-protocol available
    (require 'org-protocol)
    )


  #+end_src
  
  #+begin_src emacs-lisp
    (use-package org-gtd
      :after org
      :demand t
      :init
      (setq org-gtd-update-ack "3.0.0")
      (org-gtd-mode)
      :custom
      (org-gtd-directory "~/org/gtd")
      (org-edna-use-inheritance t)
      (org-gtd-organize-hooks '(org-gtd-set-area-of-focus org-set-tags-command))
      :config
      (org-edna-mode)
      :bind
      (("C-c c" . org-gtd-capture)
       ("C-c d e" . org-gtd-engage)
       ("C-c d p" . org-gtd-process-inbox)
       :map org-gtd-clarify-map
       ("C-c c" . org-gtd-organize)))
#+end_src

*** Org-contrib
#+begin_src emacs-lisp
  (use-package org-contrib
    :after org
    :straight (org-contrib :type git
                           :repo "https://github.com/emacsmirror/org-contrib"
                           :files (:defaults "lisp/*.el"))
    :init
    (require 'org-checklist))
#+end_src

#+begin_src emacs-lisp
  (setq-default org-startup-indented t
                org-pretty-entities t
                org-use-sub-superscripts "{}"
                org-hide-emphasis-markers t
                org-startup-with-inline-images t
                org-image-actual-width '(300))

  ;; Show hidden emphasis markers
  (use-package org-appear
    :hook
    (org-mode . org-appear-mode))
  ;; Modernise Org mode interface
  (use-package org-modern
    :hook
    (org-mode . global-org-modern-mode)
    :custom
    (org-modern-keyword nil)
    (org-modern-checkbox nil)
    (org-modern-table nil))

#+end_src
** Org auto tangle
#+begin_src emacs-lisp
(use-package org-auto-tangle
  :after org
  :hook (org-mode . org-auto-tangle-mode))
#+end_src

** COMMENT Org-agenda

#+begin_src emacs-lisp
    (use-feature org-agenda
      :config
      (setq org-agenda-files org-gtd-directory))
#+end_src

** Olivetti
*** Visual-mode
#+begin_src emacs-lisp
(use-package visual-fill-column)
#+end_src

*** olivetti-mode
Distraction-free writing
#+begin_src emacs-lisp
(use-package olivetti
  :config
  (defun my/distraction-free ()
    "Distraction-free writing environment using Olivetti package."
    (interactive)
    (if (equal olivetti-mode nil)
        (progn
          (window-configuration-to-register 1)
          (delete-other-windows)
          (text-scale-set 2)
          (setq display-line-numbers nil)
          ;; (visual-fill-column-mode)
          (olivetti-mode t))
      (progn
        (if (eq (length (window-list)) 1)
            (jump-to-register 1))
        (setq display-line-numbers 'relative)
        ;; (visual-fill-column-mode 0)
        (olivetti-mode 0)
        (text-scale-set 0))))
  :bind
  (("<f9>" . my/distraction-free)))
#+end_src

** Org notifications
#+begin_src emacs-lisp
  (use-package org-alert
    :hook (after-init . org-alert-enable)
    :init
    (setq alert-default-style 'libnotify
          org-alert-notify-after-event-cutoff 60))
#+end_src

** Org clip link
#+begin_src emacs-lisp
  (use-package org-cliplink
    :after org
    :bind (:map ctrl-z-map
           ("l" . org-cliplink)))
#+end_src

** Org download
#+begin_src emacs-lisp
(use-package org-download :after org)
#+end_src

** Org crypt
#+begin_src emacs-lisp
(use-feature org-crypt
  :config
  (require 'org-crypt)
  (org-crypt-use-before-save-magic)
  (setq org-tags-exclude-from-inheritance '("crypt"))
  (setq org-crypt-key "frederic.willem@gmail.com"))
#+end_src

** Org passwords
#+begin_src emacs-lisp
  (use-package org-passwords
    :defer 5
    :straight `(org-passwords :type git :repo "https://bitbucket.org/alfaromurillo/org-passwords.el.git" :files (:defaults))
    :bind ((:map ctrl-z-map
                 ("q" . org-passwords)
                 :map org-passwords-mode-map
                 ("C-c u" . org-passwords-copy-username)
                 ("C-c s" . org-passwords-copy-password)
                 ("C-c o" . org-passwords-open-url)))
    :custom
    (org-passwords-file "~/org/password.org.gpg")
    :config
    (setq enable-recursive-minibuffers t)
    (setq org-passwords-random-words-dictionary "/etc/dictionaries-common/words")
    (add-to-list 'org-capture-templates
                 '("P" "password" entry (file "~/org/password.org.gpg")
                   "* %^{Title}\n  %^{URL}p %^{USERNAME}p %^{PASSWORD}p")))
#+end_src

** org-timeblock
#+begin_src emacs-lisp
  (use-package org-timeblock
    :bind (:map ctrl-z-map
                ("t" . org-timeblock)))
#+end_src

* Dired
** Dired
#+begin_src emacs-lisp
  (use-feature dired
    :hook (dired-mode . dired-hide-details-mode)
    :hook (dired-mode . dired-omit-mode)
    :custom
    (dired-dwim-target t)
    (dired-create-destination-dirs 'ask)
    :init
    (require 'dired-x)
    (add-to-list 'dired-omit-extensions ".org_archive")
    (setq dired-omit-files (rx (seq bol "." (not (any "."))))
          dired-listing-switches "-Al -h -v --group-directories-first"))
#+end_src

** Dired sudo
#+begin_src emacs-lisp
(use-package dired-toggle-sudo :after dired)
#+end_src

** Dired subtree
#+begin_src emacs-lisp
  (use-package dired-subtree
    :after dired
    :bind (:map dired-mode-map
                ("TAB" . dired-subtree-toggle)))
#+end_src

** Dired imenu
#+begin_src emacs-lisp
(use-package dired-imenu
  :after dired)
#+end_src

** Dired git
#+begin_src emacs-lisp
(use-package dired-git-info
  :bind (:map dired-mode-map
              (")" . dired-git-info-mode))
  :after (dired))
#+end_src

** fd-dired
#+begin_src emacs-lisp
  (use-package fd-dired
    :bind (:map search-map
                ("g" . fd-grep-dired)
                ("n" . fd-name-dired))
    :config
    (defun fd-name-dired-vcs (dir pattern)
      (interactive
       "DFd-name (directory): \nsFd-name (filename regexp): ")
      (let ((fd-dired-pre-fd-args
             (concat " --no-ignore-vcs " fd-dired-pre-fd-args)))
        (fd-dired dir (shell-quote-argument pattern))))
    (defun fd-grep-dired-vcs (dir regexp)
      (interactive "DFd-grep (directory): \nsFd-grep (rg regexp): ")
      (let ((fd-dired-pre-fd-args
             (concat " --no-ignore-vcs " fd-dired-pre-fd-args)))
        (fd-dired dir (concat "--exec " fd-grep-dired-program
                              " " fd-grep-dired-pre-grep-args " "
                              (shell-quote-argument regexp)
                              " -0 -ls ")))))
#+end_src

* Version control
** Magit
#+begin_src emacs-lisp
  ;; wanted by magit
  (use-package transient)

  (use-package magit
    :custom
    (magit-diff-refine-hunk 'all)
    (magit-define-global-key-bindings 'default)
    :init
    (with-eval-after-load 'project
      (add-to-list 'project-switch-commands     '(magit-project-status "magit") t))
    :config
    (setq magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1))
#+end_src

** Orgit
#+begin_src emacs-lisp
(use-package orgit :after magit)
#+end_src

** Forge
Used to play with forges like GitHub or gitlab
#+begin_src emacs-lisp
(use-package forge
  :after magit)
#+end_src

** Orgit for forge
#+begin_src emacs-lisp
(use-package orgit-forge
  :after (orgit forge))
#+end_src

** Diff-hl
#+begin_src emacs-lisp
  (use-package diff-hl
    :hook (after-init . global-diff-hl-mode)
    :hook (after-init . diff-hl-flydiff-mode)
    :bind (:map ctrl-z-map
                ("v *" . diff-hl-show-hunk)
                ("v S" . diff-hl-stage-current-hunk)
                ("v [" . diff-hl-previous-hunk)
                ("v ]" . diff-hl-next-hunk)
                ("v n" . diff-hl-revert-hunk)
                ("v {" . diff-hl-show-hunk-previous)
                ("v }" . diff-hl-show-hunk-next))
    :hook ((magit-pre-refresh . diff-hl-magit-pre-refresh)
           (magit-post-refresh . diff-hl-magit-post-refresh)
           (dired-mode . diff-hl-dired-mode))
    :custom
    (diff-hl-draw-borders nil)
    (diff-hl-show-staged-changes nil)
    (diff-hl-show-hunk-inline-popup-smart-lines nil))
#+end_src

* Denote
** Denote Protesilaos Stavrou

#+begin_src emacs-lisp
  (use-package denote
    :after org
        :hook (dired-mode . denote-dired-mode)
    :bind (("C-c n n" . denote)
           ("C-c n c" . denote-region) ; "contents" mnemonic
           ("C-c n d" . denote-date)
           ("C-c n z" . denote-signature) ; "zettelkasten" mnemonic
           ("C-c n s" . denote-subdirectory)
           ("C-c n t" . denote-template)
           ("C-c n r" . denote-rename-file)
           ("C-c n R" . denote-rename-file-using-front-matter)
           :map org-mode-map
           ("C-c n i" . denote-link) ; "insert" mnemonic
           ("C-c n I" . denote-add-links)
           ("C-c m D" . denote-org-dblock-insert-links)
           ("C-c n b" . denote-backlinks)
           ("C-c n k a" . denote-keywords-add)
           ("C-c n k r" . denote-keywords-remove)
           ("C-c n f f" . denote-find-link)
           ("C-c n f b" . denote-find-backlink)
           ;; Key bindings specifically for Dired.
           :map dired-mode-map
           ("C-c C-d C-i" . denote-link-dired-marked-notes)
           ("C-c C-d C-r" . denote-dired-rename-files)
           ("C-c C-d C-k" . denote-dired-rename-marked-files-with-keywords)
           ("C-c C-d C-R" . denote-dired-rename-marked-files-using-front-matter))
    :init
    (defun my/find-project-files()
      "Open dired and select the projects files."
      (interactive)
      (dired "~/org/*==project*"))
    :config
    ;; Remember to check the doc strings of those variables.
    (setq denote-directory org-directory)
    (setq denote-known-keywords '("project" "family" "work" "personal" "archive"))
    (setq denote-infer-keywords t)
    (setq denote-sort-keywords t)
    (setq denote-file-type nil) ; Org is the default, set others here
    (setq denote-excluded-directories-regexp nil)
    (setq denote-excluded-keywords-regexp nil)
    (setq denote-prompts '(title keywords template signature))

    ;; Pick dates, where relevant, with Org's advanced interface:
    (setq denote-date-prompt-use-org-read-date t)


    ;; Read this manual for how to specify `denote-templates'.  We do not
    ;; include an example here to avoid potential confusion.

    (setq denote-templates
          '((empty . "")
            (project .  "#+category: TO_FILL\n\n\n* Objective/Goals\n* Brainstorming\n* PROJ Tasks\n** TODO initial task\n* Communication\n* Dates\n* Notes\n* Reference material\n")))

    (setq denote-date-format nil) ; read doc string
    (defun my-denote-org-extract-subtree (&optional silo)
      "Create new Denote note using current Org subtree.
     Make the new note use the Org file type, regardless of the value
     of `denote-file-type'.

     With an optional SILO argument as a prefix (\\[universal-argument]),
     ask user to select a SILO from `my-denote-silo-directories'.

     Use the subtree title as the note's title.  If available, use the
     tags of the heading are used as note keywords.

     Delete the original subtree."
      (interactive
       (list (when current-prefix-arg
               (completing-read "Select a silo: " my-denote-silo-directories nil t))))
      (if-let ((text (org-get-entry))
               (heading (org-get-heading :no-tags :no-todo :no-priority :no-comment)))
          (let ((element (org-element-at-point))
                (tags (org-get-tags))
                (denote-user-enforced-denote-directory silo))
            (delete-region (org-entry-beginning-position)
                           (save-excursion (org-end-of-subtree t) (point)))
            (denote heading
                    tags
                    'org
                    nil
                    (or
                     ;; Check PROPERTIES drawer for :created: or :date:
                     (org-element-property :CREATED element)
                     (org-element-property :DATE element)
                     ;; Check the subtree for CLOSED
                     (org-element-property :raw-value
                                           (org-element-property :closed element))))
            (insert text))
        (user-error "No subtree to extract; aborting")))

    ;; By default, we do not show the context of links.  We just display
    ;; file names.  This provides a more informative view.
    (setq denote-backlinks-show-context t)

    ;; Also see `denote-link-backlinks-display-buffer-action' which is a bit
    ;; advanced.

    ;; If you use Markdown or plain text files (Org renders links as buttons
    ;; right away)
    (add-hook 'find-file-hook #'denote-link-buttonize-buffer)

    ;; We use different ways to specify a path for demo purposes.
    (setq denote-dired-directories
          (list denote-directory
                (thread-last denote-directory (expand-file-name "attachments"))
                ;; (expand-file-name "~/Documents/books")
                ))


    ;; Automatically rename Denote buffers using the `denote-rename-buffer-format'.
    (denote-rename-buffer-mode 1)


    (setq denote-org-capture-specifiers "%l\n%i\n%?")

    ;; Also check the commands `denote-link-after-creating',
    ;; `denote-link-or-create'.  You may want to bind them to keys as well.


    ;; If you want to have Denote commands available via a right click
    ;; context menu, use the following and then enable
    ;; `context-menu-mode'.
    (add-hook 'context-menu-functions #'denote-context-menu))
#+end_src

#+begin_src emacs-lisp
(use-package denote-explore
    :custom
    ;; Where to store network data and in which format
    (denote-explore-network-format 'graphviz)
    :bind
    (;; Statistics
     ("C-c w e c" . denote-explore-count-notes)
     ("C-c w e C" . denote-explore-count-keywords)
     ("C-c w e b" . denote-explore-keywords-barchart)
     ("C-c w e x" . denote-explore-extensions-barchart)
     ;; Random walks
     ("C-c w e r" . denote-explore-random-note)
     ("C-c w e l" . denote-explore-random-link)
     ("C-c w e k" . denote-explore-random-keyword)
     ;; Denote Janitor
     ("C-c w e d" . denote-explore-identify-duplicate-notes)
     ("C-c w e z" . denote-explore-zero-keywords)
     ("C-c w e s" . denote-explore-single-keywords)
     ("C-c w e o" . denote-explore-sort-keywords)
     ("C-c w e r" . denote-explore-rename-keywords)
     ;; Visualise denote
     ("C-c w e n" . denote-explore-network)
     ("C-c w e v" . denote-explore-network-regenerate)
     ("C-c w e D" . denote-explore-degree-barchart)))
#+end_src

** Org-roam
#+begin_src emacs-lisp
  (use-package org-roam
    :custom
    (org-roam-directory "~/org/")
    (org-id-method 'ts)               
    (org-id-ts-format "%Y%m%dT%H%M%S")
    (org-roam-completion-everywhere t)
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert))
    :config
    (org-roam-setup))
#+end_src

* UI
** avy
avy - jump to character
see https://karthinks.com/software/avy-can-do-anything/
#+begin_src emacs-lisp
  (use-package dictionary)
  (use-package avy
    :custom
    (avy-keys '(?a ?r ?s ?t ?g ?n ?e ?i ?o))   ;; colemak-friendly
    :config
    (defun avy-action-kill-whole-line (pt)
      (save-excursion
        (goto-char pt)
        (kill-whole-line))
      (select-window
       (cdr
        (ring-ref avy-ring 0)))
      t)

    (setf (alist-get ?k avy-dispatch-alist) 'avy-action-kill-stay
          (alist-get ?K avy-dispatch-alist) 'avy-action-kill-whole-line)
    (defun avy-action-copy-whole-line (pt)
      (save-excursion
        (goto-char pt)
        (cl-destructuring-bind (start . end)
            (bounds-of-thing-at-point 'line)
          (copy-region-as-kill start end)))
      (select-window
       (cdr
        (ring-ref avy-ring 0)))
      t)

    (defun avy-action-yank-whole-line (pt)
      (avy-action-copy-whole-line pt)
      (save-excursion (yank))
      t)

    (setf (alist-get ?y avy-dispatch-alist) 'avy-action-yank
          (alist-get ?w avy-dispatch-alist) 'avy-action-copy
          (alist-get ?W avy-dispatch-alist) 'avy-action-copy-whole-line
          (alist-get ?Y avy-dispatch-alist) 'avy-action-yank-whole-line)
    (defun avy-action-teleport-whole-line (pt)
      (avy-action-kill-whole-line pt)
      (save-excursion (yank)) t)

    (setf (alist-get ?t avy-dispatch-alist) 'avy-action-teleport
          (alist-get ?T avy-dispatch-alist) 'avy-action-teleport-whole-line)

    (defun avy-action-mark-to-char (pt)
      (activate-mark)
      (goto-char pt))

    (setf (alist-get ?  avy-dispatch-alist) 'avy-action-mark-to-char)
    (defun avy-action-flyspell (pt)
      (save-excursion
        (goto-char pt)
        (when (require 'flyspell nil t)
          (flyspell-auto-correct-word)))
      (select-window
       (cdr (ring-ref avy-ring 0)))
      t)

    ;; Bonjour Bind to semicolon (flyspell uses C-;)
    (setf (alist-get ?\; avy-dispatch-alist) 'avy-action-flyspell)
    ;; TODO add dictionnary
    (defun dictionary-search-dwim (&optional arg)
      "Search for definition of word at point. If region is active,
        search for contents of region instead. If called with a prefix
        argument, query for word to search."
      (interactive "P")
      (if arg
          (dictionary-search nil)
        (if (use-region-p)
            (dictionary-search (buffer-substring-no-properties
                                (region-beginning)
                                (region-end)))
          (if (thing-at-point 'word)
              (dictionary-lookup-definition)
            (dictionary-search-dwim '(4))))))

    (defun avy-action-define (pt)
      (save-excursion
        (goto-char pt)
        (dictionary-search-dwim))
      (select-window
       (cdr (ring-ref avy-ring 0)))
      t)

    (setf (alist-get ?= avy-dispatch-alist) 'avy-action-define)

    (defun avy-action-helpful (pt)
      (save-excursion
        (goto-char pt)
        (helpful-at-point))
      (select-window
       (cdr (ring-ref avy-ring 0)))
      t)

    (setf (alist-get ?H avy-dispatch-alist) 'avy-action-helpful)
    (defun avy-action-embark (pt)
      (unwind-protect
          (save-excursion
            (goto-char pt)
            (embark-act))
        (select-window
         (cdr (ring-ref avy-ring 0))))
      t)

    (setf (alist-get ?. avy-dispatch-alist) 'avy-action-embark)

    :bind (("M-j" . avy-goto-char-timer)))
#+end_src

** Theme
*** COMMENT modus themes
#+begin_src emacs-lisp
(use-package modus-themes
  :config
  (setq modus-themes-to-toggle '(modus-operandi-tinted modus-vivendi-tinted)
        modus-themes-org-blocks 'tinted-background))

#+end_src

*** ef-themes
#+begin_src emacs-lisp
(use-package ef-themes
  :bind   ("<f6>" . ef-themes-toggle)
  :config
  (setq ef-themes-to-toggle '(ef-duo-dark ef-duo-light)))
#+end_src

*** COMMENT Doom-theme
#+begin_src emacs-lisp
(use-package doom-themes)
#+end_src

*** Theme changer
Change light to dark theme according to the sunset/sunrise
#+begin_src emacs-lisp
(use-package theme-changer
  :config
  (setq calendar-location-name "Saint-Nicolas, BE"
        calendar-latitude 50.628
        calendar-longitude 5.516)
  (change-theme 'ef-duo-dark 'ef-duo-dark))
#+end_src

** Icons
*** Nerd Icons
#+begin_src emacs-lisp
(use-package nerd-icons
  ;; :custom
  ;; The Nerd Font you want to use in GUI
  ;; "Symbols Nerd Font Mono" is the default and is recommended
  ;; but you can use any other Nerd Font if you want
  ;; (nerd-icons-font-family "Symbols Nerd Font Mono")
  )
#+end_src

*** Nerd icons completion
#+begin_src emacs-lisp
(use-package nerd-icons-completion
  :after marginalia
  :config
  (nerd-icons-completion-mode)
  (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))

#+end_src

*** Nerd icons for dired
#+begin_src emacs-lisp
(use-package nerd-icons-dired
  :hook
  (dired-mode . nerd-icons-dired-mode))
#+end_src

** Modeline
*** Doom-modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :init
    (setq doom-modeline-buffer-file-name-style 'buffer-neme))
#+end_src

** Windows
#+begin_src emacs-lisp
  (use-package switch-window
    :config
    (setq switch-window-minibuffer-shortcut ?z)
    :bind (("M-o" . switch-window)
           ("C-x 1" . switch-window-then-maximize)
           ("C-x 2" . switch-window-then-split-below)
           ("C-x 3" . switch-window-then-split-right)
           ("C-x 0"  . switch-window-then-delete)
           ;; god-mode friendly
           ("C-x C-1" . switch-window-then-maximize)
           ("C-x C-2" . switch-window-then-split-below)
           ("C-x C-3" . switch-window-then-split-right)
           ("C-x C-0"  . switch-window-then-delete)

           ("C-x 4 d" . switch-window-then-dired)
           ("C-x 4 f" . switch-window-then-find-file)
           ("C-x 4 m" . switch-window-then-compose-mail)
           ("C-x 4 r" . switch-window-then-find-file-read-only)

           ("C-x 4 C-f" . switch-window-then-find-file)
           ("C-x 4 C-o" . switch-window-then-display-buffer)

           ("C-x 4 0" . switch-window-then-kill-buffer)))
#+end_src

#+begin_src emacs-lisp
  (use-package shackle
    :init
    (setq shackle-default-alignment 'below
          shackle-default-size 0.38
          shackle-rules '(
                          ("\\`\\*help.*?\\*\\'" :regexp t :align t :close-on-realign t :size 0.33 :select t)
                          ('helpful-mode :align t :close-on-realign t :size 0.33 :select t)
                          ("\\`\\*Flycheck.*?\\*\\'" :regexp t :align t :close-on-realign t :size 12 :select nil)
                          ("\\`\\*Shell Command Output.*?\\*\\'" :regexp t :align t :close-on-realign t :size 12 :select nil)
                          ("\\`\\*Async Shell Command.*?\\*\\'" :regexp t :align t :close-on-realign t :size 12 :select nil)
                          ("\\`\\*Directory.*?\\*\\'" :regexp t :align t :close-on-realign t :size 12 :select t)
                          ("\\`\\*vc-change-log.*?\\*\\'" :regexp t :align t :close-on-realign t :size 0.33 :select nil)

                          ("\\`\\*HTTP Response.*?\\*\\'" :regexp t :align t :close-on-realign t :size 20 :select nil)
                          ("\\*Agenda Commands\\*" :regexp t   :align t :close-on-realign t :size 20 :select t)

                          ("\\`\\*xref.*?\\*\\'" :regexp t :align t :close-on-realign t :size 15 :select t)

                          ;; TODO make this working with shells modes
                          ('ansi-term-mode :align t :close-on-realign t :size 0.4 :select t)
                          ('occur-mode :align right :close-on-realign t :size 0.4 :select t)
                          ('grep-mode   :align left :close-on-realign t :size 0.5 :select t)
                          ;; TODO have a look to https://github.com/jixiuf/vterm-toggle
                          ("\\*vterm.*?\\*" :regexp t  :align t :close-on-realign t :size 0.4 :select t)
                          ('shell-mode :align t :close-on-realign t :size 0.4 :select t)
                          ('eshell-mode :align left :close-on-realign t :size 0.4 :select t)

                          ('magit-status-mode   :align t :select t :size 0.33 :only t)
                          ('magit-popup-mode :align t :select t :size 0.33 :close-on-realign t)
                          ('magit-diff-mode   :select nil :align left :size 0.5 :only t)
                          ('magit-log-mode   :select t :align t :size 0.4 :only t)
                          ('magit-revision-mode   :select t :align t :size 0.5 :close-on-realign t)

                          ;; lsp
                          ("\\`\\*lsp-help.*?\\*\\'" :regexp t :align t :close-on-realign t :size 10 :select t)

                          ('completion-list-mode :align t :close-on-realign t :size 0.33 :select t)
                          ('compilation-mode :align t :close-on-realign t :size 0.33 :select t)
                          ("*Warnings*" :align t :close-on-realign t :size 0.33 :select nil)
                          ("*Messages*" :align t :close-on-realign t :size 0.33 :select nil)))
    :config
    (shackle-mode 1))
#+end_src
#+begin_src emacs-lisp
(use-package transpose-frame
  :bind ("C-x R" . transpose-frame))

#+end_src
#+begin_src emacs-lisp
  (use-package golden-ratio)
#+end_src

* Editing
** Sudo edit
#+begin_src emacs-lisp
  (use-package sudo-edit
    :after embark
    :bind (:map embark-file-map ("s" . sudo-edit-find-file)))
#+end_src

** Undoing
#+begin_src emacs-lisp
  (use-package undo-fu)
#+end_src

#+begin_src emacs-lisp
  (use-package undo-fu-session
    :hook (after-init . undo-fu-session-global-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package vundo
    :demand t
    :bind ("C-x u" . vundo))
#+end_src

** Parens
*** Electric pair mode
#+begin_src emacs-lisp
  (use-feature elec-pair
    :init
    (electric-pair-mode))
#+end_src

*** Wrap-region
Emacs minor mode to wrap region with tag or punctuations
#+begin_src emacs-lisp
  (use-package wrap-region
    ;; select a region and press any of the following keys: ", ', (, {, [."
    :hook ((prog-mode org-mode) . wrap-region-mode))
#+end_src

*** Puni
"punipuni"（ぷにぷに）is a Japanese mimetic word means "soft", "bouncy", or "pillowy".

If you are surrounded by punipuni things, you feel safe and relieved. That's my feeling when using Puni: never need to worry about messing up parentheses anymore.

"Parentheses Universalistic" is another explanation ;)

#+begin_src emacs-lisp
(use-package puni
  :hook (prog-mode . puni-mode)
  :bind (:map puni-mode-map
              ("M-D"         . puni-splice)
              ("M-<up>"      . puni-splice-killing-forward)
              ("M-<down>"    . puni-splice-killing-backward)
              ("C-<right>"   . puni-slurp-forward)
              ("C-<left>"    . puni-barf-forward)
              ("C-S-<left>"  . puni-slurp-backward)
              ("C-S-<right>" . puni-barf-backward))
  :config
  (add-hook 'term-mode-hook #'puni-disable-puni-mode))
#+end_src

** Scratch buffer
Mode-specific scratch buffers
#+begin_src emacs-lisp
(use-package scratch
  :bind  (:map ctrl-z-map ("s" . scratch)))
#+end_src

** Jinx
Just install Hunspell and Hunspell-fr, Hunspell-en, ...
#+begin_src emacs-lisp
(use-package jinx
  :unless my/using-android
  :hook (emacs-startup . global-jinx-mode)
  :bind (("M-$" . jinx-correct)
         ("C-M-$" . jinx-languages))
  :init
  (setq jinx-languages "fr_FR en_US en_GB"))
#+end_src

** Commentaires
#+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :bind ("M-;" . evilnc-comment-or-uncomment-lines))
#+end_src

** Multiple cursor
Multiple cursors for Emacs. This is some pretty crazy functionality, so yes, there are kinks. Don't be afraid though
#+begin_src emacs-lisp
(use-package multiple-cursors
  :bind (( "C-S-c C-S-c" . mc/edit-lines)
         ( "C->" . mc/mark-next-like-this)
         ( "C-<" . mc/mark-previous-like-this)
         ( "C-c C-<" . mc/mark-all-like-this)))
#+end_src
test

** Dogears
Remember locations after jumping
#+begin_src emacs-lisp
  (use-package dogears
    ;; :after consult
    :hook (after-init . dogears-mode)
    :straight (dogears :host github :repo "alphapapa/dogears.el"
                       :files (:defaults (:exclude "helm-dogears.el")))
    :bind (:map global-map
                ("M-g d" . dogears-go)
                ("M-g M-b" . dogears-back)
                ("M-g M-f" . dogears-forward)
                ("M-g M-d" . dogears-list)
                ("M-g M-D" . dogears-sidebar))
    :config
    (add-to-list 'dogears-ignore-modes 'mu4e-view-mode)
    (add-to-list 'dogears-hooks 'consult-after-jump-hook))
#+end_src

* Completion
** Vertico
vertico.el - VERTical Interactive COmpletion
marginalia adds annotations in the mini buffer
#+begin_src emacs-lisp
  (use-package vertico
    :hook (after-init . vertico-mode)
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy)
    :bind (:map vertico-map
                ("?"	.	minibuffer-completion-help)
                ("M-RET"	.	minibuffer-complete)
                :map minibuffer-local-map
                ("C-h"	.	backward-kill-word))
    :custom
    (vertico-cycle t))
  #+end_src
  
  #+begin_src emacs-lisp
   (use-feature savehist
    :hook (after-init . savehist-mode))
  #+end_src

** Marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    :after vertico
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
    ;; available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    :bind (:map minibuffer-local-map
                ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))
#+end_src

** Consult
🔍 consult.el - Consulting completing-read
#+begin_src emacs-lisp
  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ;; ("C-c m" . consult-man)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command) ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)	       ;; orig. switch-to-buffer
           ("C-x C-r" . consult-recent-file)     ;; orig. recent-files-read-only
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame) ;; orig. switch-to-buffer-other-frame
           ("C-x r b" . consult-bookmark)		  ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer) ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store) ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop) ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flycheck)
           ("M-g g" . consult-goto-line)	 ;; orig. goto-line
           ("M-g o" . consult-outline)	 ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-fd)
           ("M-s c" . consult-locate)
           ("M-s g" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)   ;; orig. isearch-edit-string
           ("M-s l" . consult-line) ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)	;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)  ;; orig. next-matching-history-element
           ("M-r" . consult-history)) ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consu lt-preview-key 'any)
    (setq consult-preview-key "M-.")	;
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    ;; (consult-customize consult--source-buffer :hidden t :default nil)
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     :preview-key "M-.")
    ;; :preview-key '(:debounce 0.4 any))
    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"
    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)
    (autoload 'projectile-project-root "projectile")
    (setq consult-project-function (lambda (_) (projectile-project-root)))
    (consult-customize consult--source-buffer :hidden t :default nil))
#+end_src

*** Consult flycheck
#+begin_src emacs-lisp
(use-package consult-flycheck)
#+end_src

*** HL-TODO
#+begin_src emacs-lisp
(use-package hl-todo
  :hook ((prog-mode text-mode) . hl-todo-mode)
  :init
  (setq hl-todo-keyword-faces '(("HOLD"      . "magenta")
                                ("TODO"      . "red")
                                ("NEXT"      . "blue")
                                ("WAITING"   . "orange")
                                ("DONT"      . "#5f7f5f")
                                ("DONE"      . "forest green")
                                ("MEETING"   . "forest green")
                                ("CANCELLED" . "forest green" ))))

(use-package flycheck-hl-todo
  :defer 10 ; Need to be initialized after the rest of checkers
  :straight (:host github :repo "alvarogonzalezsotillo/flycheck-hl-todo")
  :config
  (flycheck-hl-todo-setup))
(use-package consult-todo
  :bind ("M-s t" . consult-todo))

;; FIXME See how to configure
(use-package magit-todos
  :hook (magit-status-mode . magit-todos-mode))
#+end_src

*** Consult dir
#+begin_src emacs-lisp
(use-package consult-dir
  :bind (("C-x C-d" . consult-dir)
         :map vertico-map
         ("C-x d" . consult-dir)
         ("C-x j" . consult-dir-jump-file)))
#+end_src

** Embark
Emacs Mini-Buffer Actions Rooted in Keymaps
#+begin_src emacs-lisp
  (use-package embark
    :bind (("C-h B" . embark-bindings) ;; alternative for `describe-bindings'
           ("C-."   . embark-act)         ;; pick some comfortable binding
           ("C-c o" . embark-act-on-buffer-file)
           ("C-;"   . embark-dwim)
           :map embark-symbol-map
           ("h" . helpful-symbol)
           :map embark-become-help-map
           ("s" . helpful-symbol))
    :init
    (setq prefix-help-command #'embark-prefix-help-command
          y-or-n-p-use-read-key t)
    (defun embark-which-key-indicator ()
      "An embark indicator that displays keymaps using which-key.
    The which-key help message will show the type and value of the
    current target followed by an ellipsis if there are further
    targets."
      (lambda (&optional keymap targets prefix)
        (if (null keymap)
            (which-key--hide-popup-ignore-command)
          (which-key--show-keymap
           (if (eq (plist-get (car targets) :type) 'embark-become)
               "Become"
             (format "Act on %s '%s'%s"
                     (plist-get (car targets) :type)
                     (embark--truncate-target (plist-get (car targets) :target))
                     (if (cdr targets) "…" "")))
           (if prefix
               (pcase (lookup-key keymap prefix 'accept-default)
                 ((and (pred keymapp) km) km)
                 (_ (key-binding prefix 'accept-default)))
             keymap)
           nil nil t (lambda (binding)
                       (not (string-suffix-p "-argument" (cdr binding))))))))

    (setq embark-indicators
          '(embark-which-key-indicator
            embark-highlight-indicator
            embark-isearch-highlight-indicator))

    (defun embark-hide-which-key-indicator (fn &rest args)
      "Hide the which-key indicator immediately when using the completing-read prompter."
      (which-key--hide-popup-ignore-command)
      (let ((embark-indicators
             (remq #'embark-which-key-indicator embark-indicators)))
        (apply fn args)))

    (advice-add #'embark-completing-read-prompter
                :around #'embark-hide-which-key-indicator)
    :config

    (defun embark-default-action-in-other-window ()
      "Run the default embark action in another window."
      (interactive))

    (cl-defun run-default-action-in-other-window
        (&rest rest &key run type &allow-other-keys)
      (let ((default-action (embark--default-action type)))
        (split-window-below) ; or your preferred way to split
        (funcall run :action default-action :type type rest)))

    (setf (alist-get 'embark-default-action-in-other-window
                     embark-around-action-hooks)
          '(run-default-action-in-other-window))

    (define-key embark-general-map "O" #'embark-default-action-in-other-window) ; or whatever key you prefer
    ;; source: http://steve.yegge.googlepages.com/my-dot-emacs-file
    (defun rename-file-and-buffer (buffer new-name)
      "Renames both current buffer and file it's visiting to NEW-NAME."
      (interactive "sBuffer: \nFRename %s to: ")
      (let ((name (buffer-name))
            (filename (buffer-file-name)))
        (if (not filename)
            (message "Buffer '%s' is not visiting a file!" name)
          (if (get-buffer new-name)
              (message "A buffer named '%s' already exists!" new-name)
            (progn
              (rename-file filename new-name 1)
              (rename-buffer new-name)
              (set-visited-file-name new-name)
              (set-buffer-modified-p nil))))))

    (defun my-diff-buffer-with-file (file)
      "Used for embark.
  FILE is needed only for embark call."
      (diff-buffer-with-file (current-buffer)))

    (defun embark-target-this-buffer-file ()
      (cons 'this-buffer-file (or (buffer-file-name) (buffer-name))))

    (add-to-list 'embark-target-finders #'embark-target-this-buffer-file 'append)

    (defvar-keymap this-buffer-file-map
      :doc "Commands to act on current file or buffer."
      :parent embark-general-map
      "l" 'load-file
      "b" 'byte-compile-file
      "S" 'sudo-edit-find-file
      "r" 'rename-file-and-buffer
      "d" 'my-diff-buffer-with-file
      "=" 'ediff-buffers
      "C-=" 'ediff-files
      "!" 'shell-command
      "&" 'async-shell-command
      "x" 'embark-open-externally
      "c" 'copy-file
      "k" 'kill-this-buffer
      "z" 'bury-buffer
      "|" 'embark-shell-command-on-buffer
      "g" 'revert-buffer)
    (add-to-list 'embark-keymap-alist '(this-buffer-file . this-buffer-file-map))

    (defun embark-act-on-buffer-file (&optional arg)
      (interactive "P")
      (let ((embark-target-finders '(embark-target-this-buffer-file)))
        (embark-act arg)))

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none))))

    (defmacro my/embark-split-action (fn split-type)
      `(defun ,(intern (concat "my/embark-"
                               (symbol-name fn)
                               "-"
                               (car (last  (split-string
                                            (symbol-name split-type) "-"))))) ()
         (interactive)
         (funcall #',split-type)
         (call-interactively #',fn)))

    (define-key embark-file-map     (kbd "2") (my/embark-split-action find-file split-window-below))
    (define-key embark-buffer-map   (kbd "2") (my/embark-split-action switch-to-buffer split-window-below))
    (define-key embark-bookmark-map (kbd "2") (my/embark-split-action bookmark-jump split-window-below))

    (define-key embark-file-map     (kbd "3") (my/embark-split-action find-file split-window-right))
    (define-key embark-buffer-map   (kbd "3") (my/embark-split-action switch-to-buffer split-window-right))
    (define-key embark-bookmark-map (kbd "3") (my/embark-split-action bookmark-jump split-window-right)))
#+end_src

** Orderless
Emacs completion style that matches multiple regexps in any order
#+begin_src emacs-lisp
(use-package orderless
  :demand t
  :config
  (defun +orderless--consult-suffix ()
    "Regexp which matches the end of string with Consult tofu support."
    (if (and (boundp 'consult--tofu-char) (boundp 'consult--tofu-range))
        (format "[%c-%c]*$"
                consult--tofu-char
                (+ consult--tofu-char consult--tofu-range -1))
      "$"))

  (defun +orderless-consult-dispatch (word _index _total)
    (cond
     ;; Ensure that $ works with Consult commands, which add disambiguation suffixes
     ((string-suffix-p "$" word)
      `(orderless-regexp . ,(concat (substring word 0 -1) (+orderless--consult-suffix))))
     ;; File extensions
     ((and (or minibuffer-completing-file-name
               (derived-mode-p 'eshell-mode))
           (string-match-p "\\`\\.." word))
      `(orderless-regexp . ,(concat "\\." (substring word 1) (+orderless--consult-suffix))))))

  ;; Define orderless style with initialism by default
  (orderless-define-completion-style +orderless-with-initialism
    (orderless-matching-styles '(orderless-initialism orderless-literal orderless-regexp orderless-flex)))

  (setq completion-styles '(orderless basic flex)
        completion-category-defaults nil
          ;;; Enable partial-completion for files.
          ;;; Either give orderless precedence or partial-completion.
          ;;; Note that completion-category-overrides is not really an override,
          ;;; but rather prepended to the default completion-styles.
        ;; completion-category-overrides '((file (styles orderless partial-completion))) ;; orderless is tried first
        completion-category-overrides '((file (styles partial-completion)) ;; partial-completion is tried first
                                        ;; enable initialism by default for symbols
                                        (command (styles +orderless-with-initialism))
                                        (variable (styles +orderless-with-initialism))
                                        (symbol (styles +orderless-with-initialism)))
        orderless-component-separator #'orderless-escapable-split-on-space ;; allow escaping space with backslash!
        orderless-style-dispatchers (list #'+orderless-consult-dispatch
                                          #'orderless-affix-dispatch)))
#+end_src

** Company
#+begin_src emacs-lisp
  (use-package company
    :hook (after-init . global-company-mode)
    :custom
    (company-backends
     '(company-bbdb company-semantic company-cmake
                    (company-capf company-yasnippet)
                    company-clang company-files
                    (company-dabbrev-code company-gtags company-etags company-keywords)
                    company-oddmuse company-dabbrev)))
  #+end_src
  
  #+begin_src emacs-lisp
  (use-package company-posframe
    :hook (company-mode . company-posframe-mode))
#+end_src
** Snippets

#+begin_src emacs-lisp
  (use-package yasnippet
   :defer 3
   :config  (yas-global-mode))
  (use-package java-snippets :after yasnippet)
#+end_src
  
#+begin_src emacs-lisp
  (use-package yasnippet-snippets
    :after yasnippet)
 
#+end_src

* Projects
** Project.el
#+begin_src emacs-lisp
  (use-package projectile
    :hook (after-init . projectile-mode)
    :custom
    (projectile-switch-project-action 'projectile-commander)
    :bind ("C-x C-p" . projectile-command-map))

#+end_src

** Perspective
#+begin_src emacs-lisp
  (use-package perspective
    :custom
    (persp-mode-prefix-key (kbd "C-z w"))  ; pick your own prefix key here
    :init
    (persp-mode)
    :config
    (add-to-list 'consult-buffer-sources persp-consult-source))
#+end_src

** Perspectives projectile bridge
#+begin_src emacs-lisp
  (use-package persp-projectile)
#+end_src

** Perspective tabs
#+begin_src emacs-lisp
  (use-package perspective-tabs
    :after perspective
    :straight (:host sourcehut :repo "woozong/perspective-tabs")
    :init
    (perspective-tabs-mode))
#+end_src
** ibuffer projectile
#+begin_src emacs-lisp
  (use-package ibuffer-projectile)
#+end_src

** Buffers
#+begin_src emacs-lisp
  (use-feature ibuffer
    :bind ("C-x C-b" . ibuffer)
    :hook (ibuffer .  (lambda ()
                        (persp-ibuffer-set-filter-groups)
                        (unless (eq ibuffer-sorting-mode 'alphabetic)
                          (ibuffer-do-sort-by-alphabetic)))))
#+end_src

#+begin_src emacs-lisp
(use-package nerd-icons-ibuffer
  :hook (ibuffer-mode . nerd-icons-ibuffer-mode))
#+end_src

* Mail
** Mu4e
#+begin_src emacs-lisp
  (use-package mu4e
    :disabled t
    ;; :straight `(mu4e
    ;;             :type git
    ;;             :host github
    ;;             :repo "djcb/mu"
    ;;             :branch "release/1.10"
    ;;             :pre-build ,(cl-letf (((symbol-function #'el-get-package-directory) (lambda (package) (straight--repos-dir (format "%S" package)))) (el-get-install-info (straight--el-get-install-info)) (el-get-emacs (straight--emacs-path)) (el-get-dir (straight--repos-dir))) (pcase system-type (_ `(("./autogen.sh") ("make")))))
    ;;             :files (:defaults "build/mu4e/*.el"))
    :load-path ("/usr/share/emacs/site-lisp/mu4e/")
    :straight (:type built-in)
    :defer 1
    :commands (mu4e mu4e-update-index mu4e-compose-new)
    :after org
    :unless my/using-android
    :bind (("<f5>"  . mu4e)
           :map mu4e-main-mode-map
           ("q" . meow-quit)
           :map mu4e-headers-mode-map
           ("C-c c" . mu4e-org-store-and-capture)
           ("¡"     . mu4e-headers-mark-all-unread-read)
           :map mu4e-view-mode-map
           ("C-c c" . mu4e-org-store-and-capture))
    :custom
    (mu4e-hide-index-messages t)
    (mu4e-sent-messages-behavior 'delete) ;; managed by gmail
    (mu4e-attachment-dir "~/Downloads/")

    (mu4e-headers-fields '((:human-date . 12)
                           (:flags      . 6)
                           (:from       . 30)
                           (:subject)))

    :config
    (setq mu4e-mu-binary "/usr/bin/mu")
    (setq mu4e-context-policy 'pick-first)
    (setq mu4e-compose-context-policy nil)
    (setq mu4e-contexts
          (list
           ;; Work account
           (make-mu4e-context
            :name "frederic"
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/frederic" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address                                              . "frederic.willem@gmail.com")
                    (user-full-name                                                 . "Frédéric Willem")
                    (mu4e-drafts-folder                                             . "/frederic/[Gmail].Drafts")
                    (mu4e-sent-folder                                               . "/frederic/[Gmail].Sent Mail")
                    (mu4e-refile-folder                                             . "/frederic/[Gmail].Starred")
                    (mu4e-trash-folder                                              . "/frederic/[Gmail].Trash")
                    (mu4e-maildir-shortcuts                                         . (list ( :maildir "/frederic/INBOX" :key ?i)
                                                                                            ( :maildir "/frederic/[Gmail].All Mail"  :key ?a)
                                                                                            ( :maildir "/frederic/[Gmail].Sent Mail"  :key ?S)
                                                                                            ( :maildir "/frederic/[Gmail].Trash" :key ?t)
                                                                                            ( :maildir "/frederic/[Gmail].Starred" :key ?s)) )

                    (mu4e-bookmarks                                                 . (( :name  "Unread messages"
                                                                                         :query "maildir:/frederic/INBOX AND flag:unread AND NOT flag:trashed"
                                                                                         :key ?u)
                                                                                       ( :name  "All Unread messages"
                                                                                         :query "maildir:/frederic/* AND flag:unread"
                                                                                         :key ?U)
                                                                                       ( :name "Important messages"
                                                                                         :query "prio:high AND NOT flag:trashed AND NOT maildir:\"/frederic/[Gmail]/Sent mail\""
                                                                                         :key ?i)
                                                                                       ( :name "Today's messages"
                                                                                         :query "maildir:/frederic/* AND date:today..now"
                                                                                         :key ?t)
                                                                                       ( :name "Last 7 days"
                                                                                         :query "maildir:/frederic/* AND date:7d..now"
                                                                                         :hide-unread t
                                                                                         :key ?w)))))

           ;; (make-mu4e-context
           ;;  :name "maman"
           ;;  :match-func
           ;;  (lambda (msg)
           ;;    (when msg
           ;;      (string-prefix-p "/maman" (mu4e-message-field msg :maildir))))
           ;;  :vars '((user-mail-address	    .	"michellelambert1202@gmail.com")
           ;;          (user-full-name	    .	"Michelle Lambert")
           ;;          (mu4e-refile-folder	    .	"/maman/[Gmail].Tous les messages")
           ;;          (mu4e-trash-folder	    .	"/maman/[Gmail].Corbeille")
           ;;          (mu4e-maildir-shortcuts .	(list
           ;;                                         ( :maildir "/maman/INBOX" :key ?i)
           ;;                                         ( :maildir "/maman/[Gmail].Tous les messages"  :key ?a)
           ;;                                         ( :maildir "/maman/[Gmail].Messages envoy&AOk-s"  :key ?S)
           ;;                                         ( :maildir "/maman/[Gmail].Corbeille" :key ?t)
           ;;                                         ( :maildir "/maman/[Gmail].Suivis" :key ?s)))
           ;;          (mu4e-bookmarks . nil)

           ;;          ))
           ))


    (require 'mu4e-icalendar)
    (mu4e-icalendar-setup)
    (setq gnus-icalendar-org-capture-file "~/org/Inbox.org")
    (setq gnus-icalendar-org-capture-headline '("Calendar"))
    (setq gnus-icalendar-org-enabled-p t) ;; don't create capture template here
    (setq mail-user-agent 'mu4e-user-agent)
    (setq mu4e-confirm-quit nil)
    (setq mu4e-get-mail-command "offlineimap")
   (setq mu4e-read-option-use-builtin nil
         mu4e-completing-read-function 'completing-read)
    ;; (setq mu4e-change-filenames-when-moving t)
    (defun my-confirm-empty-subject ()
      "Allow user to quit when current message subject is empty."
      (or (message-field-value "Subject")
          (yes-or-no-p "Really send without Subject? ")
          (keyboard-quit)))

    (add-hook 'message-send-hook #'my-confirm-empty-subject)
    (setq sendmail-program (executable-find "msmtp")
          send-mail-function #'smtpmail-send-it
          message-sendmail-f-is-evil t
          message-sendmail-extra-arguments '("--read-envelope-from")
          message-send-mail-function #'message-send-mail-with-sendmail)
    ;; don[t show buffer after sending
    (setq message-kill-buffer-on-exit t)
    (setq org-export-show-temporary-export-buffer nil)
    ;; set a more visible mu4e view (with dark-mode enabled)
    ;; (setq shr-color-visible-luminance-min 0)
    (setq mu4e-update-interval 600)

    (add-to-list 'org-capture-templates
                 '("m" "Email Workflow"))
    (add-to-list 'org-capture-templates
                 '("mt" "Capture to task" entry
                   (function capture-filename)
                   "* REPLY to %:fromname in %a\n%i ")) ;; don't immdeiate-finsh want to be able to set a todo
    ;; template to capture events
    (add-to-list 'org-capture-templates
                 '("#" "used by gnus-icalendar-org" entry
                   (function capture-filename)
                   "%i")) ;; don't immediate-finsh want to be able to set a todo


    (setq mu4e-org-contacts-file "~/org/contacts.org")
    (add-to-list 'mu4e-headers-actions
                 '("org-contact-add" . mu4e-action-add-org-contact) t)
    (add-to-list 'mu4e-view-actions
                 '("org-contact-add" . mu4e-action-add-org-contact) t)
    (mu4e t)
    (mu4e-modeline-mode -1))
#+end_src

*** Mu4e contrib
#+begin_src emacs-lisp
(use-feature mu4e-contrib
  :after mu4e)
#+end_src

*** mu markers
fancy markers
#+begin_src emacs-lisp
  (use-package mu4e-marker-icons
    :after mu4e
    :config
    (mu4e-marker-icons-mode 1))
#+end_src

#+begin_src emacs-lisp
  (use-package all-the-icons)
#+end_src

*** Org mime
#+begin_src emacs-lisp
  (use-package org-mime
    :after notmuch
    :custom
    (message-cite-reply-position 'above)
    (message-cite-style 'message-cite-style-gmail)
    :hook (message-send . org-mime-confirm-when-no-multipart)
    :bind (:map message-mode-map
                ("C-c M-o" . org-mime-htmlize)
                ("C-c M-O" . org-mime-edit-mail-in-org-mode)
                :map org-mode-map
                ("C-c M-o" . org-mime-org-buffer-htmlize))
    :config
    (add-hook 'org-mime-html-hook
              (lambda ()
                (org-mime-change-element-style
                 "pre" (format "color: %s; background-color: %s; padding: 0.5em;"
                               "#E6E1DC" "#232323"))))

    ;; the following can be used to nicely offset block quotes in email bodies
    (add-hook 'org-mime-html-hook
              (lambda ()
                (org-mime-change-element-style
                 "blockquote" "border-left: 2px solid gray; padding-left: 4px;")))
    :init
    (setq org-mime-export-options '(:with-latex dvipng
                                                :section-numbers nil
                                                :with-author nil
                                                :with-toc nil)))
#+end_src

#+begin_src emacs-lisp
  (use-package htmlize)
#+end_src

** contacts
*** BBDB
#+begin_src emacs-lisp
  (use-package bbdb)
   #+end_src
*** vcard 
#+begin_src emacs-lisp

  (use-package bbdb-vcard)
  #+end_src
  
** notmuch
#+begin_src emacs-lisp
  (use-package notmuch
    :defer 1
    :bind (("<f5>" . notmuch-hello)
           ("C-<f5>" . notmuch-hello)
           ("C-x m" . notmuch-mua-new-mail)
           :map notmuch-show-part-map
           ("h" . notmuch-show-view-html+))
    :custom
    (notmuch-multipart/alternative-discouraged '("text/plain" "multipart/related"))
    (notmuch-archive-tags '("-inbox" "-unread"))
    (notmuch-saved-searches
     '((:name "inbox" :query "tag:inbox" :key "i")
       (:name "unread" :query "tag:unread" :key "u")
       (:name "flagged" :query "tag:flagged" :key "f")
       (:name "sent" :query "tag:sent" :key "t")
       (:name "drafts" :query "tag:draft" :key "d")
       (:name "all" :query "not tag:trash and not tag:deleted and not tag:spam" :key "a" :search-type tree)))
    :init
    (defun notmuch-show-view-html+ ()
      "Open the text/html part of the current message using
  `notmuch-show-view-part'."
      (interactive)
      (save-excursion
        (goto-char
         (prop-match-beginning
          (text-property-search-forward
           :notmuch-part
           "text/html"
           (lambda (value notmuch-part)
             (equal (plist-get notmuch-part :content-type)
                    value)))))
        (notmuch-show-view-part)))
    (setq sendmail-program "gmi")
    (setq message-sendmail-extra-arguments '("send" "--quiet" "-t" "-C" "~/.mail"))
    (setq send-mail-function 'sendmail-send-it)
    (setq message-send-mail-function 'message-send-mail-with-sendmail)
    (require 'notmuch-address)
    (setq notmuch-address-command "~/.config/emacs/gook")
    :config
    (setq notmuch-tagging-keys '(("t" ("+trash" "-inbox" "-unread") "Move to trash")
                                 ("a" notmuch-archive-tags "Archive")
                                 ("u" notmuch-show-mark-read-tags "Mark read")
                                 ("f" ("+flagged") "Flag")
                                 ("s" ("+spam" "-inbox" "-unread") "Mark as spam")
                                 ("d" ("+deleted" "-inbox") "Delete"))))
#+end_src
*** Notmuch-indicator
#+begin_src emacs-lisp
  (use-package notmuch-indicator
    :init
    (setq notmuch-indicator-args
          '((:terms "tag:unread and tag:inbox" :label "U" :label-face success))
          notmuch-indicator-refresh-count (* 60 3)
          notmuch-indicator-hide-empty-counters nil
          notmuch-indicator-force-refresh-commands '(notmuch-refresh-this-buffer))
    (notmuch-indicator-mode 1))
#+end_src
*** Notmuch org link
#+begin_src emacs-lisp
  (use-package ol-notmuch
    :demand t)
#+end_src
* Calendars
** Calendar
#+begin_src emacs-lisp
(use-package  password-store)
#+end_src

#+begin_src emacs-lisp
  (use-package calfw)

  (use-package calfw-org
    :bind (:map ctrl-z-map ("c" . cfw:open-org-calendar))
    :init
    (setq cfw:org-overwrite-default-keybinding t))
#+end_src

** Holidays calendar
#+begin_src emacs-lisp
(require 'calendar)
(setq calendar-week-start-day 1)
(require 'holidays)
(setq calendar-christian-all-holidays-flag t)
(setq calendar-holidays '((holiday-fixed 1 1 "New Year's Day")
                          (holiday-fixed 2 2 "Groundhog Day")
                          (holiday-fixed 2 14 "Valentine's Day")
                          (holiday-fixed 3 17 "St. Patrick's Day")
                          (holiday-fixed 4 1 "April Fools' Day")
                          (holiday-float 5 0 2 "Mother's Day")
                          (holiday-float 6 0 3 "Father's Day")
                          (holiday-fixed 7 21 "Belgium National Day")
                          (holiday-fixed 10 31 "Halloween")
                          (holiday-fixed 11 11 "Veteran's Day")
                          (holiday-float 11 4 4 "Thanksgiving")
                          (holiday-easter-etc)
                          (holiday-fixed 12 25 "Christmas")
                          (if calendar-christian-all-holidays-flag
                              (append
                               (holiday-fixed 1 6 "Epiphany")
                               (holiday-julian 12 25 "Christmas (Julian calendar)")
                               (holiday-greek-orthodox-easter)
                               (holiday-fixed 8 15 "Assumption")
                               (holiday-advent 0 "Advent")))
                          (solar-equinoxes-solstices)
                          (holiday-sexp calendar-daylight-savings-starts
                                        (format "Daylight Saving Time Begins %s"
                                                (solar-time-string
                                                 (/ calendar-daylight-savings-starts-time
                                                    (float 60))
                                                 calendar-standard-time-zone-name)))
                          (holiday-sexp calendar-daylight-savings-ends
                                        (format "Daylight Saving Time Ends %s"
                                                (solar-time-string
                                                 (/ calendar-daylight-savings-ends-time

                                                    (float 60))
                                                 calendar-daylight-time-zone-name)))))
#+end_src

** Org-gcal
#+begin_src emacs-lisp
(use-package org-gcal
  :bind (:map org-mode-map
              ("C-c G" . org-gcal-post-at-point))
  :init
  (setq org-gcal-notify-p nil)
  (require 'plstore)
  (add-to-list 'plstore-encrypt-to "E7446C9175DAAA79")
  (setq client-secret (password-store-get 'calendar))
  (setq org-gcal-client-id "140991280434-1736v7des240n016cqe46cuof13ggvbc.apps.googleusercontent.com"
        org-gcal-client-secret client-secret
        org-gcal-fetch-file-alist '(("frederic.willem@gmail.com" .  "~/org/calendar.org"))))
#+end_src

* Programming
** Error checking
#+begin_src emacs-lisp
(use-package flycheck
  :hook (prog-mode . flycheck-mode)
  :custom
  (flycheck-emacs-lisp-load-path 'inherit))
#+end_src

** Compilation mode
Setup ANSI colors for the compilation buffer
#+begin_src emacs-lisp
(use-package xterm-color
  :config
  (setq compilation-environment '("TERM=xterm-256color"))

  (defun my/advice-compilation-filter (f proc string)
    (funcall f proc (xterm-color-filter string)))

  (advice-add 'compilation-filter :around #'my/advice-compilation-filter) )
#+end_src

** Java + Lsp
#+begin_src emacs-lisp
(use-package lsp-mode
  :init
  (setq lsp-keymap-prefix "C-c l")
  :hook (((java-mode java-ts-mode) . lsp)
         (lsp-completion-mode . my/lsp-mode-setup-completion))
  :commands lsp)
#+end_src

#+begin_src emacs-lisp
(use-package lsp-java
  :config
  (setq lombok-library-path (concat user-emacs-directory "lombok.jar"))

  (unless (file-exists-p lombok-library-path)
    (url-copy-file "https://projectlombok.org/downloads/lombok.jar" lombok-library-path))

  (setq lsp-java-vmargs '("-XX:+UseParallelGC" "-XX:GCTimeRatio=4" "-XX:AdaptiveSizePolicyWeight=90" "-Dsun.zip.disableMemoryMapping=true" "-Xmx4G" "-Xms100m"))

  (push (concat "-javaagent:"
                (expand-file-name lombok-library-path))
        lsp-java-vmargs))
#+end_src

#+begin_src emacs-lisp
;; optionally
(use-package lsp-ui :commands lsp-ui-mode)
#+end_src

#+begin_src emacs-lisp
(use-package lsp-treemacs :commands lsp-treemacs-errors-list)
#+end_src

#+begin_src emacs-lisp
;; optionally if you want to use debugger
(use-package dap-mode)
#+end_src

#+begin_src emacs-lisp
(use-package dap-java :straight nil)
#+end_src

** Haskell
*** haskell-mode
#+begin_src emacs-lisp
(use-package haskell-mode)
#+end_src

*** lsp-haskell
#+begin_src emacs-lisp
(use-package lsp-haskell
  :after haskell-mode
  :hook ((haskell-mode . lsp)
         (haskell-literate-mode . lsp)))
#+end_src

** Tree-sitter
*** ~Treesit~
#+begin_src emacs-lisp
  (use-package treesit :straight (:type built-in))
#+end_src
*** Automatic use of tree-sitter
#+begin_src emacs-lisp
  (use-package treesit-auto
    :disabled t
    :hook (after-init . global-treesit-auto-mode)
    :config
    (setq treesit-auto-install 'prompt)
    (setq my-java-tsauto-config
          (make-treesit-auto-recipe
           :lang 'java
           :ts-mode 'java-ts-mode
           :remap '(java-mode)
           :url "https://github.com/tree-sitter/tree-sitter-java"
           :revision "master"
           :source-dir "src"))

    (add-to-list 'treesit-auto-recipe-list my-java-tsauto-config))
#+end_src

*** Text object
#+begin_src emacs-lisp
  (use-package ts-movement
  :straight (ts-movement :host github :repo "haritkapadia/ts-movement")
    :init
    (define-key ts-movement-map (kbd "C-c . d") #'tsm/delete-overlay-at-point)
    (define-key ts-movement-map (kbd "C-c . D") #'tsm/clear-overlays-of-type)
    (define-key ts-movement-map (kbd "C-c . b") #'tsm/node-prev)
    (define-key ts-movement-map (kbd "C-c . C-b") #'tsm/backward-overlay)
    (define-key ts-movement-map (kbd "C-c . C-f") #'tsm/forward-overlay)
    (define-key ts-movement-map (kbd "C-c . f") #'tsm/node-next)
    (define-key ts-movement-map (kbd "C-c . p") #'tsm/node-parent)
    (define-key ts-movement-map (kbd "C-c . n") #'tsm/node-child)
    (define-key ts-movement-map (kbd "C-c . N") #'tsm/node-children)
    (define-key ts-movement-map (kbd "C-c . s") #'tsm/node-children-of-type)
    (define-key ts-movement-map (kbd "C-c . a") #'tsm/node-start)
    (define-key ts-movement-map (kbd "C-c . e") #'tsm/node-end)
    (define-key ts-movement-map (kbd "C-c . m") #'tsm/node-mark)
    (define-key ts-movement-map (kbd "C-c . c") #'tsm/mc/mark-all-overlays)
    :hook ((bash-ts-mode . ts-movement-mode)
           (java-ts-mode . ts-movement-mode))
    )
#+end_src

** Formatting
#+begin_src emacs-lisp
(use-package format-all
  :commands format-all-mode
  :hook (prog-mode . format-all-mode))

#+end_src

* Utilities
** Search the web
#+begin_src emacs-lisp
  (use-package keyword-search
    :bind (:map ctrl-z-map ("k" . keyword-search))
    :init
    (add-to-list 'keyword-search-alist '(wikipedia-fr . "http://fr.wikipedia.org/wiki/%s"))
    (add-to-list 'keyword-search-alist '(archlinux-package . "https://archlinux.org/packages/?sort=&arch=x86_64&q=%s"))
    (add-to-list 'keyword-search-alist '(archlinux-wiki . "https://wiki.archlinux.org/index.php?search=%s")))
#+end_src

** Emacs everywhere
System-wide popup Emacs windows for quick edits
#+begin_src emacs-lisp
  (use-package emacs-everywhere)
#+end_src
To use it, assign to a shortcut
#+begin_src shell :tangle ~/.config/emacs/everywhere.sh
#!/bin/bash

emacsclient --eval "(emacs-everywhere)"
#+end_src

** Translate
#+begin_src emacs-lisp
  (use-package google-translate
    :init
    (require 'google-translate-smooth-ui)
    (global-set-key "\C-zT" 'google-translate-buffer)
    (setq google-translate-translation-directions-alist
          '(("nl" . "fr") ("fr" . "nl") ("en" . "fr") ("fr" . "en"))))
#+end_src

** PDF Tools
#+begin_src emacs-lisp
(use-package pdf-tools
  :init
  (pdf-loader-install))
#+end_src

** Bookmark-Plus
#+begin_src emacs-lisp
  (use-package bookmark+
    :defer 2)
#+end_src 

** Ripgrep
#+begin_src emacs-lisp
  (use-package ripgrep)
 #+end_src
  
** Chez-moi
#+begin_src emacs-lisp
  (use-package chezmoi
    :demand t
    :init
    (add-to-list 'auto-minor-mode-alist '(".*chezmoi.*" . chezmoi-mode))
    :bind (:map ctrl-z-map
                ("m" . chezmoi-find)))
#+end_src

** Rainbow mode
#+begin_src emacs-lisp
  (use-package rainbow-mode)
#+end_src

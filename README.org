#+TITLE: Emacs literate configuration
#+PROPERTY: header-args :tangle init.el
#+OPTIONS: toc:2 num:nil
#+auto_tangle: t
* Emacs configuration
After spending lot of time with doom Emacs, willing to switch to a more native emacs config while keeping evil mode
* Header
Header for the config init.el file
#+begin_src emacs-lisp
  ;;; init.el --- Willydeliege's Emacs configuration -*- lexical-binding: t -*-

  ;; Copyright (C) 2023 Frédéric Willem

  ;; Author: Frédéric Willem <frederic.willem@gmail.com>
  ;; Keywords: internal

  ;;; Commentary:
  ;; A fully fledged, reproducible Emacs configuration

  ;;; Code:
#+end_src

* Package manager
Using [[https://github.com/radian-software/straight.el#getting-started][straight]] as package manager
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src
** USE-PACKAGE
We will use use-package
#+begin_src emacs-lisp
  (straight-use-package 'use-package)
#+end_src
and use straight by default
#+begin_src emacs-lisp
  (setq straight-use-package-by-default t)
#+end_src

* Using straight properly with initiating in early-init.el
This will prevent to use package.el
#+begin_src emacs-lisp :tangle early-init.el
  ;;; early-init.el --- Emacs early init file
  ;;; Commentary:
  ;; Code to run before init.el is loaded.
  ;;; Code:

  ;; Disable package.el
  (setq package-enable-at-startup nil)
  ;; start emacs window maximized
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  ;; (setq warning-minimum-level :emergency)
  ;;disable splash screen and startup message
  ;; (setq inhibit-startup-message t)
  ;; (setq initial-scratch-message nil)
  ;; trust the themes
  (setq custom-safe-themes t)
  (global-set-key (kbd "C-x C") 'save-buffers-kill-emacs)
  (setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))

  ;; auto-save-mode doesn't create the path automatically!
  (make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)

  (setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
        auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))

  (setq create-lockfiles nil)

  (provide 'early-init)
  ;;; early-init.el ends here
#+end_src

* Defaults
#+begin_src emacs-lisp
  ;; Save the last place edited in files
  (save-place-mode 1)
  (setq save-place-file (locate-user-emacs-file "places" ".emacs-places")
        save-place-forget-unreadable-files nil)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (setq display-time-day-and-date t)
  (setq display-time-default-load-average nil)
  (setq display-time-24hr-format t)
  (display-time-mode 1)
  (display-battery-mode 1)
  (setq recentf-max-menu-items 25)
  (setq recentf-max-saved-items 25)
  (add-hook 'text-mode-hook 'display-line-numbers-mode)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (setq-default display-line-numbers-type 'relative
  	      display-line-numbers-width 4)
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "google-chrome")
  (set-face-attribute 'default nil :height 110) ;; 100 is 10pts
#+end_src
** custom file
#+begin_src emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src

** Help
Better help buffer
#+begin_src emacs-lisp
  (use-package helpful
    :init
    (setq helpful--view-literal t)
    :config
    ;; Note that the built-in `describe-function' includes both functions
    ;; and macros. `helpful-function' is functions only, so we provide
    ;; `helpful-callable' as a drop-in replacement.
    (global-set-key (kbd "C-h f") #'helpful-callable)
    ;; Lookup the current symbol at point. C-c C-d is a common keybinding
    ;; for this in lisp modes but C-c C-. is convenient for org-mode as well.
    (global-set-key (kbd "C-c C-.") #'helpful-at-point)
    (global-set-key (kbd "C-h v") #'helpful-variable)
    (global-set-key (kbd "C-h k") #'helpful-key)
    (global-set-key (kbd "C-h x") #'helpful-command))
#+end_src

** Terminals
*** Vterm
#+begin_src emacs-lisp
  (use-package vterm)
#+end_src

*** Multi vterm
Use vterm as multiplexer
#+begin_src emacs-lisp
  (use-package multi-vterm
    :bind ( ("C-c t t" . multi-vterm)
            :map vterm-mode-map
            ("C-c t r" . multi-vterm-rename-buffer)
            ("C-c t n" . multi-vterm-next)
            ("C-c t p" . multi-vterm-prev))
    :config
    (add-hook 'vterm-mode-hook
              (lambda ()
                (evil-insert-state)))
    (define-key vterm-mode-map [return]                      #'vterm-send-return)
    )
#+end_src

*** Eshell
#+begin_src emacs-lisp
  (use-package eshell
    :bind ("C-c t e" . eshell))
  (use-package eshell-vterm
    :demand t
    :after eshell
    :config
    (eshell-vterm-mode))
#+end_src

** Org auto tangle
#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :hook (org-mode . org-auto-tangle-mode))
#+end_src

* Recentf
#+begin_src emacs-lisp
  (require 'recentf)
  (require 'cl-lib)
  (defun org-is-agenda-file (filename)
    (member (file-truename filename) org-agenda-files))
  (cl-pushnew 'org-is-agenda-file recentf-exclude)
  (recentf-mode 1)
#+end_src

* Version control
** Magit
#+begin_src emacs-lisp
  (use-package magit
    :hook (git-commit-mode . evil-insert-state)
    :bind (("C-x g" . magit-status)))

  (use-package git-gutter
    :hook ((prog-mode text-mode) . git-gutter-mode)
    :config
    (setq git-gutter:update-interval 0.02))

  (use-package git-gutter-fringe
    :config
    (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))
#+end_src

** Orgit
#+begin_src emacs-lisp
  (use-package orgit)
#+end_src

** Diff-hl
#+begin_src emacs-lisp
  (use-package diff-hl
    :after magit
    :hook ((magit-pre-refresh . diff-hl-magit-pre-refresh)
  	 (magit-post-refresh . diff-hl-magit-post-refresh))
    :init
    (global-diff-hl-mode 1))
#+end_src

* Personal information
#+begin_src emacs-lisp
  (setq user-full-name "Frédéric Willem"
        user-mail-address "frederic.willem@gmail.com")
#+end_src

* UI
** Theme
#+begin_src emacs-lisp
  (use-package ef-themes
    :init
    (setq ef-themes-region '(intense no-extend neutral))
    (load-theme 'ef-dark
  	      :no-confirm))

#+end_src

** Icons
*** Nerd Icons
#+begin_src emacs-lisp
  (use-package nerd-icons
    ;; :custom
    ;; The Nerd Font you want to use in GUI
    ;; "Symbols Nerd Font Mono" is the default and is recommended
    ;; but you can use any other Nerd Font if you want
    ;; (nerd-icons-font-family "Symbols Nerd Font Mono")
    )
#+end_src
*** Nerd icons completion
#+begin_src emacs-lisp
  (use-package nerd-icons-completion
    :after marginalia
    :config
    (nerd-icons-completion-mode)
    (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))

#+end_src
*** Nerd icons for dired
#+begin_src emacs-lisp
  (use-package nerd-icons-dired
    :hook
    (dired-mode . nerd-icons-dired-mode))
#+end_src
*** Nerd icons treemacs
#+begin_src emacs-lisp
  (use-package treemacs-nerd-icons
    :after treemacs
    :config
    (treemacs-load-theme "nerd-icons"))
#+end_src

** Modeline
*** Doom-modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode))
#+end_src

** Windows
#+begin_src emacs-lisp
  (use-package ace-window
    :bind ("M-o" . ace-window))
#+end_src

#+begin_src emacs-lisp
  (use-package popper
    :after perspective
    :bind (("C-`"   . popper-toggle-latest)
  	 ("C-~"   . popper-cycle)
  	 ("C-M-`" . popper-toggle-type))
    :config
    (setq popper-group-function #'popper-group-by-perspective) ; group by perspective
    :init
    (setq popper-reference-buffers
  	'("\\*Messages\\*"
  	  "Output\\*$"
  	  "\\*Async Shell Command\\*"
  	  "*Occur*"
  	  help-mode
  	  helpful-mode
  	  compilation-mode))
    (popper-mode +1)
    (popper-echo-mode +1))                ; For echo area hints
  (use-package shackle
    :init
    (setq shackle-default-alignment 'below
  	shackle-default-size 0.4
  	shackle-rules '((help-mode           :align below :select t)
  			(helpful-mode        :align below)
  			(compilation-mode    :select t   :size 0.25)
  			("*compilation*"     :select nil :size 0.25)
  			("*ag search*"       :select nil :size 0.25)
  			("*Flycheck errors*" :select nil :size 0.25)
  			("*Warnings*"        :select nil :size 0.25)
  			("*Error*"           :select nil :size 0.25)
  			("*Org Links*"       :select nil :size 0.1)
  			(magit-status-mode                :align bottom :size 0.5  :inhibit-window-quit t)
  			(magit-log-mode                   :same t                  :inhibit-window-quit t)
  			(magit-commit-mode                :ignore t)
  			(magit-diff-mode     :select nil  :align left   :size 0.5)
  			(git-commit-mode                  :same t)
  			(vc-annotate-mode                 :same t)
  			))
    :config
    (shackle-mode 1))
#+end_src

* Editing
** Sudo edit
#+begin_src emacs-lisp
  (use-package sudo-edit
    :demand t)
#+end_src

** Evil mode
Usage of evil mode as I used to work with vim binding for years
#+begin_src emacs-lisp
  (use-package undo-fu)
  (use-package undo-fu-session
    :config
    (setq undo-fu-session-incompatible-files '("/COMMIT_EDITMSG\\'" "/git-rebase-todo\\'")))
  (undo-fu-session-global-mode)

  (use-package vundo)

  (use-package evil
    :init
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    (setq evil-undo-system 'undo-fu)
    :config
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :custom
    (evil-collection-calendar-want-org-bindings t)
    :config
    (setq evil-collection-corfu-key-themes '(tab-n-go))
    (evil-collection-init))
#+end_src

** Which-key
Emacs package that displays available keybindings in popup
When you can't remember all keybindings
#+begin_src emacs-lisp
  (use-package which-key
    :after evil
    :init
    (which-key-setup-side-window-bottom)
    (which-key-enable-god-mode-support)
    ;; avoid which-key to be truncated
    (setq which-key-allow-imprecise-window-fit nil)
    :hook (after-init . which-key-mode)
    :custom
    (which-key-paging-prefixes '("C-c" "C-x" "C-w"))
    (which-key-allow-evil-operators t)
    (which-key-use-C-h-commands nil)
    (which-key-idle-delay 0.2))
#+end_src

** Parens
Use built-in electric pair mode
#+begin_src emacs-lisp
  (electric-pair-mode 1)
#+end_src
*** Surround
This package emulates surround.vim by Tim Pope. The functionality is wrapped into a minor mode.
This package uses Evil as its vi layer.
#+begin_src emacs-lisp
  (use-package evil-surround
    :config
    (global-evil-surround-mode 1))
#+end_src

** Jump
avy is a GNU Emacs package for jumping to visible text using a char-based decision tree
#+begin_src emacs-lisp
  (use-package avy
    :demand t
    :config
    (evil-global-set-key 'normal "S" 'evil-avy-goto-char-2))
#+end_src

** Evil commentary
Comment stuff out. A port of vim-commentary
#+begin_src emacs-lisp
  (use-package evil-commentary
    :bind ("M-;" . evil-commentary-line)
    :init
    (evil-commentary-mode))
#+end_src

** evil search
anzu.el provides a minor mode which displays current match and total matches information in the mode-line in various search modes.
#+begin_src emacs-lisp
  (use-package anzu
    :init
    (global-anzu-mode +1))
  (use-package evil-anzu :demand t)
#+end_src

** evil org mode
Supplemental evil-mode keybindings to emacs org-mode
#+begin_src emacs-lisp
  (use-package evil-org
    :hook (( org-agenda-mode . evil-org-mode)
  	 (org-mode . evil-org-mode))
    :config
    (evil-org-set-key-theme '(textobjects insert navigation additional shift todo))
    (evil-define-key '(insert normal emacs) 'evil-org-mode
      (kbd "RET") 'evil-org-return)
    (setq org-return-follows-link t)
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src

** God mode
#+begin_src emacs-lisp
  (use-package god-mode)
  (use-package evil-god-state
    :config
    (evil-define-key 'normal global-map "," 'evil-execute-in-god-state)
    (evil-define-key 'god global-map [escape] 'evil-god-state-bail))
#+end_src

* Spelling
** Jinx
Just install hunspell and hunspell-fr, hunspell-en, ...
#+begin_src emacs-lisp
  (use-package jinx
    :hook (emacs-startup . global-jinx-mode)
    :bind (("C-M-$" . jinx-languages)
        	 :map evil-normal-state-map
        	 ("z =" . jinx-correct)
  	 :map evil-motion-state-map
  	 ("[ s" . jinx-previous)
  	 ("] s" . jinx-next))
    :init
    (setq jinx-languages "fr_FR en_US en_GB"))
#+end_src

* Completion
** Vertico + Marginalia
vertico.el - VERTical Interactive COmpletion
marginalia adds annotations in the mini buffer
#+begin_src emacs-lisp
  (use-package vertico
    :straight (vertico :files (:defaults "extensions/*.el"))
    :bind (:map vertico-map
                ("C-j" . vertico-next)
                ("C-k" . vertico-previous)
                ("C-f" . vertico-exit)
                :map minibuffer-local-map
                ("C-h" . backward-kill-word))
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))
  (use-package vertico-multiform-mode
    :after jinx
    :straight nil
    :init
    (add-to-list 'vertico-multiform-categories
                 '(jinx grid (vertico-grid-annotate . 20)))
    (vertico-multiform-mode 1))

  (use-package savehist
    :init
    (savehist-mode))

  (use-package marginalia
    :after vertico
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))
#+end_src

** Consult
#+begin_src emacs-lisp

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ;; ("C-c m" . consult-man)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x C-r" . consult-recent-file)        ;; orig. recent-files-read-only
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flycheck)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)
           ("M-s D" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consu lt-preview-key 'any)
    (setq consult-preview-key "M-.")	;
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    ;; (consult-customize consult--source-buffer :hidden t :default nil)
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     :preview-key "M-.")
    ;; :preview-key '(:debounce 0.4 any))
    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
      ;;;;  projectile.el (projectile-project-root)
    (autoload 'projectile-project-root "projectile")
    (setq consult-project-function (lambda (_) (projectile-project-root)))
      ;;;; 5. No project support
    ;; (setq consult-project-function nil)
    )
#+end_src
*** Consult projectile
#+begin_src emacs-lisp
  (use-package consult-projectile
    :straight (consult-projectile :type git :host gitlab :repo "OlMon/consult-projectile" :branch "master")
    :config
    (setq consult-projectile-use-projectile-switch-project t))
#+end_src
*** Consult org roam
#+begin_src emacs-lisp
  (use-package consult-org-roam
    :after org-roam
    :init
    (require 'consult-org-roam)
    ;; Activate the minor mode
    (consult-org-roam-mode 1)
    :custom
    ;; Use `ripgrep' for searching with `consult-org-roam-search'
    (consult-org-roam-grep-func #'consult-ripgrep)
    ;; Configure a custom narrow key for `consult-buffer'
    (consult-org-roam-buffer-narrow-key ?r)
    ;; Display org-roam buffers right after non-org-roam buffers
    ;; in consult-buffer (and not down at the bottom)
    (consult-org-roam-buffer-after-buffers t)
    :config
    ;; Eventually suppress previewing for certain functions
    (consult-customize
     consult-org-roam-forward-links
     :preview-key (kbd "C-;"))
    :bind
    ;; Define some convenient keybindings as an addition
    ("C-c n f" . consult-org-roam-file-find)
    ("C-c n b" . consult-org-roam-backlinks)
    ("C-c n l" . consult-org-roam-forward-links)
    ("C-c n r" . consult-org-roam-search))
#+end_src
*** Consult flyceck
#+begin_src emacs-lisp
  (use-package consult-flycheck)
#+end_src
*** Consult dir
#+begin_src emacs-lisp
  (use-package consult-dir
    :bind (("C-x C-d" . consult-dir)
           :map vertico-map
           ("C-x C-d" . consult-dir)
           ("C-x C-j" . consult-dir-jump-file))
    :config
    (setq consult-dir-project-list-function #'consult-dir-projectile-dirs))
#+end_src

** Embark
#+begin_src emacs-lisp
  (use-package embark
    :demand t ;; needed by eldoc otherwize eldoc error
    :bind
    (("C-h B" . embark-bindings) ;; alternative for `describe-bindings'
     ("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)
     (:map evil-normal-state-map)
     ("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim))        ;; good alternative: M-.
    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
    ;; strategy, if you want to see the documentation from multiple providers.
    (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none))))
    (defun embark-which-key-indicator ()
      "An embark indicator that displays keymaps using which-key.
        The which-key help message will show the type and value of the
        current target followed by an ellipsis if there are further
        targets."
      (lambda (&optional keymap targets prefix)
        (if (null keymap)
            (which-key--hide-popup-ignore-command)
          (which-key--show-keymap
           (if (eq (plist-get (car targets) :type) 'embark-become)
               "Become"
             (format "Act on %s '%s'%s"
                     (plist-get (car targets) :type)
                     (embark--truncate-target (plist-get (car targets) :target))
                     (if (cdr targets) "…" "")))
           (if prefix
               (pcase (lookup-key keymap prefix 'accept-default)
                 ((and (pred keymapp) km) km)
                 (_ (key-binding prefix 'accept-default)))
             keymap)
           nil nil t (lambda (binding)
                       (not (string-suffix-p "-argument" (cdr binding))))))))

    (setq embark-indicators
          '(embark-which-key-indicator
            embark-highlight-indicator
            embark-isearch-highlight-indicator))

    (defun embark-hide-which-key-indicator (fn &rest args)
      "Hide the which-key indicator immediately when using the completing-read prompter."
      (which-key--hide-popup-ignore-command)
      (let ((embark-indicators
             (remq #'embark-which-key-indicator embark-indicators)))
        (apply fn args)))

    (defmacro my/embark-ace-action (fn)
      `(defun ,(intern (concat "my/embark-ace-" (symbol-name fn))) ()
         (interactive)
         (with-demoted-errors "%s"
           (require 'ace-window)
           (let ((aw-dispatch-always t))
             (aw-switch-to-window (aw-select nil))
             (call-interactively (symbol-function ',fn))))))

    (define-key embark-file-map     (kbd "o") (my/embark-ace-action find-file))
    (define-key embark-buffer-map   (kbd "o") (my/embark-ace-action switch-to-buffer))
    (define-key embark-bookmark-map (kbd "o") (my/embark-ace-action bookmark-jump))

    (defmacro my/embark-split-action (fn split-type)
      `(defun ,(intern (concat "my/embark-"
                               (symbol-name fn)
                               "-"
                               (car (last  (split-string
                                            (symbol-name split-type) "-"))))) ()
         (interactive)
         (funcall #',split-type)
         (call-interactively #',fn)))

    (define-key embark-file-map     (kbd "2") (my/embark-split-action find-file split-window-below))
    (define-key embark-buffer-map   (kbd "2") (my/embark-split-action switch-to-buffer split-window-below))
    (define-key embark-bookmark-map (kbd "2") (my/embark-split-action bookmark-jump split-window-below))

    (define-key embark-file-map     (kbd "3") (my/embark-split-action find-file split-window-right))
    (define-key embark-buffer-map   (kbd "3") (my/embark-split-action switch-to-buffer split-window-right))
    (define-key embark-bookmark-map (kbd "3") (my/embark-split-action bookmark-jump split-window-right))
    ;; edit file as sudoer
    (defun my/sudo-find-file (file)
      "Open FILE as root."
      (interactive "FOpen file as root: ")
      (when (file-writable-p file)
        (user-error "File is user writeable, aborting sudo"))
      (find-file (if (file-remote-p file)
                     (concat "/" (file-remote-p file 'method) ":"
                             (file-remote-p file 'user) "@" (file-remote-p file 'host)
                             "|sudo:root@"
                             (file-remote-p file 'host) ":" (file-remote-p file 'localname))
  		 (concat "/sudo:root@localhost:" file))))
    (define-key embark-file-map (kbd "S") 'my/sudo-find-file)

    (advice-add #'embark-completing-read-prompter
                :around #'embark-hide-which-key-indicator))
#+end_src

** Orderless
#+begin_src emacs-lisp
  (use-package orderless
    :demand t
    :config

    (defun +orderless--consult-suffix ()
      "Regexp which matches the end of string with Consult tofu support."
      (if (and (boundp 'consult--tofu-char) (boundp 'consult--tofu-range))
          (format "[%c-%c]*$"
                  consult--tofu-char
                  (+ consult--tofu-char consult--tofu-range -1))
        "$"))

    ;; Recognizes the following patterns:
    ;; * .ext (file extension)
    ;; * regexp$ (regexp matching at end)
    (defun +orderless-consult-dispatch (word _index _total)
      (cond
       ;; Ensure that $ works with Consult commands, which add disambiguation suffixes
       ((string-suffix-p "$" word)
        `(orderless-regexp . ,(concat (substring word 0 -1) (+orderless--consult-suffix))))
       ;; File extensions
       ((and (or minibuffer-completing-file-name
                 (derived-mode-p 'eshell-mode))
             (string-match-p "\\`\\.." word))
        `(orderless-regexp . ,(concat "\\." (substring word 1) (+orderless--consult-suffix))))))

    ;; Define orderless style with initialism by default
    (orderless-define-completion-style +orderless-with-initialism
      (orderless-matching-styles '(orderless-initialism orderless-literal orderless-regexp orderless-flex)))

    ;; You may want to combine the `orderless` style with `substring` and/or `basic`.
    ;; There are many details to consider, but the following configurations all work well.
    ;; Personally I (@minad) use option 3 currently. Also note that you may want to configure
    ;; special styles for special completion categories, e.g., partial-completion for files.
    ;;
    ;; 1. (setq completion-styles '(orderless))
    ;; This configuration results in a very coherent completion experience,
    ;; since orderless is used always and exclusively. But it may not work
    ;; in all scenarios. Prefix expansion with TAB is not possible.
    ;;
    ;; 2. (setq completion-styles '(substring orderless))
    ;; By trying substring before orderless, TAB expansion is possible.
    ;; The downside is that you can observe the switch from substring to orderless
    ;; during completion, less coherent.
    ;;
    ;; 3. (setq completion-styles '(orderless basic))
    ;; Certain dynamic completion tables (completion-table-dynamic)
    ;; do not work properly with orderless. One can add basic as a fallback.
    ;; Basic will only be used when orderless fails, which happens only for
    ;; these special tables.
    ;;
    ;; 4. (setq completion-styles '(substring orderless basic))
    ;; Combine substring, orderless and basic.
    ;;
    (setq completion-styles '(orderless basic flex)
          completion-category-defaults nil
          ;;; Enable partial-completion for files.
          ;;; Either give orderless precedence or partial-completion.
          ;;; Note that completion-category-overrides is not really an override,
          ;;; but rather prepended to the default completion-styles.
          ;; completion-category-overrides '((file (styles orderless partial-completion))) ;; orderless is tried first
          completion-category-overrides '((file (styles partial-completion)) ;; partial-completion is tried first
                                          ;; enable initialism by default for symbols
                                          (command (styles +orderless-with-initialism))
                                          (variable (styles +orderless-with-initialism))
                                          (symbol (styles +orderless-with-initialism)))
          orderless-component-separator #'orderless-escapable-split-on-space ;; allow escaping space with backslash!
          orderless-style-dispatchers (list #'+orderless-consult-dispatch
                                            #'orderless-affix-dispatch)))
#+end_src

** Company
#+begin_src emacs-lisp
  ;; needed to use with cape yasnippets
  (use-package company)
#+end_src

** Corfu
#+begin_src emacs-lisp
  (use-package corfu
    :straight (corfu :files (:defaults "extensions/*.el"))
    :bind (:map corfu-map
                ("RET" . nil)
                ("C-j" . corfu-next)
                ("C-k" . corfu-previous)
                ("TAB" . corfu-next)
                ([tab] . corfu-next)
                ("S-TAB" . corfu-previous)
                ([backtab] . corfu-previous)
                ("<escape>" . corfu-quit))
    :custom
    ;; Works with `indent-for-tab-command'. Make sure tab doesn't indent when you
    ;; want to perform completion
    (completion-cycle-threshold nil)  ; Always show candidates in menu
    (corfu-auto nil)                  ;;enablw completion with tab
    (corfu-auto-prefix 2)
    (corfu-auto-delay 0.25)
    (corfu-min-width 80)
    (corfu-max-width corfu-min-width) ; Always have the same width
    (corfu-preselect 'prompt)
    (corfu-scroll-margin 4)
    (corfu-cycle t)
    (corfu-separator ?\s)             ; Use space
    (corfu-quit-no-match 'separator)  ; Don't quit if there is `corfu-separator' inserted
    (corfu-preview-current 'insert)   ; Preview first candidate. Insert on input if only one
    (corfu-preselect-first nil)       ; Preselect first candidate?
    (corfu-popupinfo-delay 0.5)
    :config
    (defun corfu-enable-in-minibuffer ()
      "Enable Corfu in the minibuffer if `completion-at-point' is bound."
      (when (where-is-internal #'completion-at-point (list (current-local-map)))
        (setq-local corfu-auto nil)       ;; Enable/disable auto completion
        (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup
    		  corfu-popupinfo-delay nil)
        (corfu-mode 1)))
    (add-hook 'minibuffer-setup-hook #'corfu-enable-in-minibuffer)
    :init
    (setq tab-always-indent 'complete)
    (corfu-popupinfo-mode)
    (corfu-indexed-mode)
    (global-corfu-mode))
#+end_src

** Cape
#+begin_src emacs-lisp
  ;; Add extensions
  (use-package cape
    ;; Bind dedicated completion commands
    ;; Alternative prefix keys: C-c p, M-p, M-+, ...
    :bind (("M-p p" . completion-at-point) ;; capf
  	 ("M-p t" . complete-tag)        ;; etags
  	 ("M-p d" . cape-dabbrev)        ;; or dabbrev-completion
  	 ("M-p h" . cape-history)
  	 ("M-p f" . cape-file)
  	 ("M-p k" . cape-keyword)
  	 ("M-p s" . cape-symbol)
  	 ("M-p a" . cape-abbrev)
  	 ("M-p l" . cape-line)
  	 ("M-p w" . cape-dict)
  	 ("M-p \\" . cape-tex)
  	 ("M-p _" . cape-tex)
  	 ("M-p ^" . cape-tex)
  	 ("M-p &" . cape-sgml)
  	 ("M-p r" . cape-rfc1345))
    :init
    ;; Add `completion-at-point-functions', used by `completion-at-point'.
    ;; NOTE: The order matters!

    (setq completion-at-point-functions
          (list (cape-super-capf (cape-company-to-capf #'company-yasnippet) #'cape-dict #'cape-dabbrev #'cape-keyword #'cape-symbol)))
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-elisp-block))
#+end_src

** Icons
#+begin_src emacs-lisp
  (use-package kind-icon
    :ensure t
    :after corfu
    :custom
    (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src

** Snippets
#+begin_src emacs-lisp
  (use-package yasnippet
    :init
    (yas-global-mode 1))
  (use-package yasnippet-snippets
    :after yasnippet)
  (use-package doom-snippets
    :after yasnippet
    :straight (doom-snippets :type git :host github :repo "doomemacs/snippets" :files ("*.el" "*")))
#+end_src

* Projects
** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :init
    (projectile-mode +1)
    (def-projectile-commander-method ?g
                                     "Search in project."
                                     (consult-grep))
    (setq projectile-switch-project-action 'projectile-commander)
    :bind (:map projectile-mode-map
                ("C-c p" . projectile-command-map)))
#+end_src

** Perspective
#+begin_src emacs-lisp
  (use-package perspective
    :hook ((after-init . persp-mode)
  	 (kill-emacs . persp-state-save))
    :bind
    (("C-x k" . persp-kill-buffer*)
     ("C-x C-b" . persp-list-buffers))        ; or use a nicer switcher, see below
    :custom
    (persp-mode-prefix-key (kbd "C-c w")) ; pick your own prefix key here
    :config
    (setq persp-state-default-file "~/.emacs.d/persist")
    (consult-customize consult--source-buffer :hidden t :default nil)
    (add-to-list 'consult-buffer-sources persp-consult-source))
#+end_src

** Persp project
#+begin_src emacs-lisp
  (use-package persp-projectile)
#+end_src

* Org mode
** Org basics
#+begin_src emacs-lisp
  (use-package org
    :bind (("C-c a" . org-agenda)
  	 (:map org-mode-map)
  	 ("C-c $" . org-archive-subtree-default))
    :hook ((org-mode . org-indent-mode))
  :custom
  (org-level-faces nil)
    :init
    (org-babel-do-load-languages 'org-babel-load-languages
  			       (append org-babel-load-languages
  				       '((shell     . t)
  					 (java      . t))))
    :config
    (require 'org-archive)
    (setq org-archive-default-command 'org-archive-to-archive-sibling)
    (setq
     ;; Edit settings
     org-log-done 'time
     org-log-into-drawer t
     org-auto-align-tags nil
     org-tags-column 0
     org-catch-invisible-edits 'show-and-error
     org-special-ctrl-a/e t
     org-insert-heading-respect-content t

     ;; Org styling, hide markup etc.
     org-hide-emphasis-markers t
     org-pretty-entities t
     org-ellipsis "…"

     ;; Agenda styling
     org-agenda-tags-column 0
     org-agenda-block-separator ?─
     org-agenda-time-grid
     '((daily today require-timed)
       (800 1000 1200 1400 1600 1800 2000)
       " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
     org-agenda-current-time-string
     "⭠ now ─────────────────────────────────────────────────")
    (setq org-stuck-projects '("+Project/PROJ" ("NEXT" "WAIT" "MEETING" "HOLD") nil ""))
    (setq org-refile-targets '((org-agenda-files :maxlevel . 1)))
    (setq org-outline-path-complete-in-steps nil)         ; Refile in a single go
    (setq org-startup-folded 'fold)
    (setq org-todo-keyword-faces
    (quote (("TODO" :foreground "dark orange" :weight bold)
            ("NEXT" :foreground "orange red" :weight bold)
            ("DONE" :foreground "forest green" :weight bold)
            ("WAIT" :foreground "magenta" :weight bold)
            ("HOLD" :foreground "magenta" :weight bold)
            ("CANCELLED" :foreground "dark red" :weight bold)
            ("KILL" :foreground "dark red" :weight bold)
            ("MEETING" :foreground "chocolate" :weight bold)
            )))
    (setq org-todo-keywords
          '((sequence
             "TODO(t)"  ; A task that needs doing & is ready to do
             "NEXT(n)"  ; The nex task in to perform in the project
             "MEETING"  ; Meeting
             "PROJ(p)"  ; A project, which usually contains other tasks
             "WAIT(W@)"  ; Something external is holding up this task
             "HOLD(H@)"  ; This task is paused/on hold because of me
             "IDEA(i)"  ; An unconfirmed and unapproved task or notion
             "|"
             "DONE(d!)"  ; Task successfully completed
  	   "KILL(k)") ; Task was cancelled, aborted or is no longer applicable
  	  (sequence
  	   "REPLY(r)"
  	   "|"
  	   "REPLIED(R!)")
  	  (sequence
  	   "[ ](T)"   ; A task that needs doing
             "[-](S)"   ; Task is in progress
             "|"
             "[X](D)")  ; Task was completed
            (sequence
             "READ(r)"
             "WATCH(w)"))))

#+end_src

** Org capture
Enter insert mode when capturing things
#+begin_src emacs-lisp
  (use-package org
    :hook
    (org-capture-mode . evil-insert-state))

#+end_src

** Org-agenda
#+begin_src emacs-lisp
  (use-package org-super-agenda
    :custom 
    (org-agenda-skip-scheduled-if-deadline-is-shown t)
    (org-agenda-skip-timestamp-if-deadline-is-shown t)
    :config
    (setq org-deadline-warning-days 5)
    (setq org-agenda-custom-commands
  	'(("z" "My view"
  	   (   (agenda "" ((org-agenda-span 'day)
  			   (org-agenda-start-day nil)
  			   (org-super-agenda-groups
  			    '((:name "Today"
  				     :time-grid t
  				     :date today
  				     :deadline today
  				     :scheduled today
  				     :order 1)
  			      (:discard (:anything))))))
  	       (alltodo "" ((org-agenda-overriding-header "")
  			    (org-super-agenda-groups
  			     '(;; Each group has an implicit boolean OR operator between its selectors.
  			       (:name "Passed deadline"
  				      :and (:deadline past :todo ("TODO" "WAIT" "HOLD" "NEXT"))
  				      :face (:background "#7f1b19"))
  			       (:scheduled past)
  			       (:scheduled future)
  			       (:name "Important"
  				      :priority "A")
  			       (:priority<= "B"
  					    ;; Show this section after "Today" and "Important", because
  					    ;; their order is unspecified, defaulting to 0. Sections
  					    ;; are displayed lowest-number-first.
  					    :order 1)
  			       (:name "Meeting"
  				      :todo "MEETING"
  				      :order 7)
  			       (:name "Next"
  				      :todo "NEXT"
  				      :order 8)
  			       (:name "Waiting"
  				      :todo "WAIT"
  				      :order 9)
  			       (:name "On hold"
  				      :todo "HOLD"
  				      :order 10)
  			       (:discard (:todo "PROJ"))))))))))
    (add-hook 'org-agenda-mode-hook 'org-super-agenda-mode))
#+end_src

** Org timeblock
#+begin_src emacs-lisp
  (use-package org-timeblock
    :hook ((org-timeblock-mode org-timeblock-list-mode) . my/org-timeblock-evil-map)
    :straight (org-timeblock :type git
  			   :host github
                             :repo "ichernyshovvv/org-timeblock")
    :custom
    (org-timeblock-inbox-file "/home/willefi/org/calendar.org")
    :init
    (defun my/org-timeblock-evil-map ()
      "Set the keybindings for 'org-timeblock' to be compatible with evil mode"
      (evil-define-key 'normal org-timeblock-mode-map
        "+" 'org-timeblock-new-task
        "j" 'org-timeblock-forward-block
        "l" 'org-timeblock-forward-column
        "h" 'org-timeblock-backward-column
        "k" 'org-timeblock-backward-block
        (kbd "C-<down>") 'org-timeblock-day-later
        (kbd "C-<up>") 'org-timeblock-day-earlier
        (kbd "RET") 'org-timeblock-goto
        (kbd "TAB") 'org-timeblock-goto-other-window
        "d" 'org-timeblock-set-duration
        "r" 'org-timeblock-redraw-buffers
        "gd" 'org-timeblock-jump-to-day
        "s" 'org-timeblock-schedule
        "t" 'org-timeblock-toggle-timeblock-list
        "v" 'org-timeblock-switch-scaling
        "V" 'org-timeblock-switch-view)
      (evil-define-key 'normal org-timeblock-list-mode-map
        "+" 'org-timeblock-new-task
        "j" 'org-timeblock-list-next-line
        "k" 'org-timeblock-list-previous-line
        (kbd "C-<down>") 'org-timeblock-day-later
        (kbd "C-<up>") 'org-timeblock-day-earlier
        (kbd "C-s") 'org-timeblock-list-save
        (kbd "M-<down>") 'org-timeblock-list-drag-line-forward
        (kbd "M-<up>") 'org-timeblock-list-drag-line-backward
        (kbd "RET") 'org-timeblock-list-goto
        (kbd "TAB") 'org-timeblock-list-goto-other-window
        "S" 'org-timeblock-list-toggle-sort-function
        "d" 'org-timeblock-list-set-duration
        "r" 'org-timeblock-redraw-buffers
        "gd" 'org-timeblock-jump-to-day
        "q" 'org-timeblock-quit
        "s" 'org-timeblock-list-schedule
        "t" 'org-timeblock-list-toggle-timeblock
        "v" 'org-timeblock-switch-scaling
        "V" 'org-timeblock-switch-view)))
#+end_src

** Ovilvetti
#+begin_src emacs-lisp
  (use-package olivetti
    :custom (olivetti-body-width 92)
    :bind ("C-c M-o" . olivetti-mode))
#+end_src

** Org pretty bullets
#+begin_src emacs-lisp
  (use-package org-superstar
    :hook (org-mode . org-superstar-mode))
#+end_src

** Org roam
#+begin_src emacs-lisp
  (use-package org-roam
    :demand t  ;; Ensure org-roam is loaded by default
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/org")
    (org-roam-completion-everywhere t)
    :bind
    (
     ("C-c n l" . org-roam-buffer-toggle)
     ("C-c n i" . org-roam-node-insert)
     ("C-c n I" . org-roam-node-insert-immediate)
     ("C-c n p" . my/org-roam-find-project)
     ("C-c n t" . my/org-roam-capture-task)
     ("C-c n b" . my/org-roam-capture-inbox)
     ("C-c x" . my/org-roam-capture-inbox)
     ("C-c n x" . my/close-project)
     ("C-c i" . my/open-inbox)
     ("C-c j" . org-roam-dailies-capture-today)
     :map org-mode-map
     ("C-M-i" . completion-at-point)
     :map org-roam-dailies-map
     ("Y" . org-roam-dailies-capture-yesterday)
     ("T" . org-roam-dailies-capture-tomorrow)
     )
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (add-to-list 'display-buffer-alist '("\\*org-roam.*"
                                       (display-buffer-in-side-window)
                                       (side . right)
  				       (window-width . 0.3)
  				       (window-height . fit-window-to-buffer)))
    (setq org-roam-db-node-include-function
    	(lambda ()
    	  (not
    	   (or (member "ATTACH" (org-get-tags)) ;; don't consider attach tags
    	       (member "t" ( org-entry-member-in-multivalued-property nil "ICAL_EVENT" "t" )))))) ;; don't consider ical events
    (setq org-roam-node-display-template
    	(concat "${title} "
    		(propertize "${tags:20}" 'face 'org-tag)))
    (require 'org-roam-dailies) ;; Ensure the keymap is available
    (setq org-roam-dailies-capture-templates
    	'(("d" "default" entry "* %<%H:%M> %?" :target
    	   (file+datetree "%<%Y-W%W>.org" 'week))))
    (require 'org-roam-protocol)
    (defun my/org-protocol-insert-selection-dwim (selection)
      "Insert SELECTION ."
      (unless (string= selection "")
        ;; (format "#+begin_quote\n%s\n#+end_quote" selection)))
        (format "%s\n" selection)))

    (setq org-roam-capture-ref-templates
          '(("r" "ref" entry "* %(my/org-protocol-insert-selection-dwim \"%i\")%?"
             :target (file+head "${slug}.org"
                                "#+title: ${title}\n
                                       ,#+created: %u\n")
             :unnarrowed t)))
    (org-roam-db-autosync-mode))

  (add-to-list 'org-roam-capture-templates  '("p" "project" plain
                                              (file "~/org/.templates/project-template.org")
                                              :target (file "%<%Y%m%d%H%M%S>-${slug}.org")
                                              :unnarrowed t))
  (defun my/open-inbox ()
    (interactive)
    (find-file "~/org/Inbox.org"))
  (defun org-roam-node-insert-immediate (arg &rest args)
    (interactive "P")
    (let ((args (push arg args))
          (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                    '(:immediate-finish t)))))
      (apply #'org-roam-node-insert args)))

  (defun my/org-roam-filter-by-tag (tag-name)
    (lambda (node)
      (member tag-name (org-roam-node-tags node))))

  (defun my/org-roam-list-notes-by-tag (tag-name)
    (mapcar #'org-roam-node-file
            (seq-filter
             (my/org-roam-filter-by-tag tag-name)
             (org-roam-node-list))))

  (defun my/org-roam-refresh-agenda-list ()
    (interactive)
    (setq org-agenda-files (my/org-roam-list-notes-by-tag "Project"))
    (add-to-list 'org-agenda-files "~/org/calendar.org"))

  ;; Build the agenda list the first time for the session
  (my/org-roam-refresh-agenda-list)

  (defun my/org-roam-project-finalize-hook ()
    "Adds the captured project file to `org-agenda-files' if the
                                           capture was not aborted."
    ;; Remove the hook since it was added temporarily
    (remove-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    ;; Add project file to the agenda list if the capture was confirmed
    (unless org-note-abort
      (with-current-buffer (org-capture-get :buffer)
        (add-to-list 'org-agenda-files (buffer-file-name)))))

  (defun my/org-roam-find-project ()
    (interactive)
    ;; Add the project file to the agenda after capture is finished
    (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    ;; Select a project file to open, creating it if necessary
    (org-roam-node-find
     nil
     nil
     (my/org-roam-filter-by-tag "Project")
     nil))

  (defun my/org-roam-capture-inbox ()
    (interactive)
    (org-roam-capture- :node (org-roam-node-create)
                       :templates '(("i" "inbox" plain "** %?"
                                     :target (file+head+olp "Inbox.org" "#+title: Inbox\n" ("Inbox"))))))

  (defun my/org-roam-capture-task ()
    (interactive)
    ;; Add the project file to the agenda after capture is finished
    (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    ;; Capture the new task, creating the project file if necessary
    (org-roam-capture- :node (org-roam-node-read
                              nil
                              (my/org-roam-filter-by-tag "Project"))
                       :templates '(("p" "project" plain "** TODO %?"
                                     :target (file+olp "%<%Y%m%d%H%M%S>-${slug}.org"
                                                       ("Tasks"))))))
  (defun my/close-project ()
    "close a project by removing Project tag and adding ARCHIVE tag"
    (interactive)
    (org-roam-tag-add '("ARCHIVE"))
    (org-roam-tag-remove '("Project"))
    (save-buffer))
  (defvar id nil)
  (defvar id-string nil)
  (defun my/org-roam-copy-todo-to-today ()
    (interactive)
    ;; (org-store-link nil)
    (org-copy-subtree)
    (let ( ;; Set this to nil to delete the original!
          ( id (org-entry-get 1 "ID"))
          ( id-string "id:")
          (org-roam-dailies-capture-templates
           '(("t" "tasks" plain "**** %(org-link-make-string
                        (concat id-string id)
                        (org-roam-node-title (org-roam-node-from-id id)))\n%(org-paste-subtree 5)\n%?"
              :target (file+datetree "%<%Y-W%W>.org" 'week)
              :immediate-finish t))))
      (save-window-excursion
        (org-roam-dailies--capture (current-time) nil))))
  (add-to-list 'org-after-todo-state-change-hook
               (lambda ()
                 (when (equal org-state "DONE")
                   (my/org-roam-copy-todo-to-today))))
#+end_src

** Org citar
#+begin_src emacs-lisp
  (use-package citar
    :hook
    (org-mode . citar-capf-setup)
    :custom
    (org-cite-global-bibliography '("~/bib/references.bib"))
    (citar-library-paths '("~bib/files"))
    (citar-notes-paths '("~/org"))
    (org-cite-insert-processor 'citar)
    (org-cite-follow-processor 'citar)
    (org-cite-activate-processor 'citar)
    (citar-bibliography org-cite-global-bibliography)
    ;; optional: org-cite-insert is also bound to C-c C-x C-@
    :bind
    (:map org-mode-map ("C-c b" . #'org-cite-insert)))
  (use-package citar-embark
    :after citar embark
    :no-require
    :config (citar-embark-mode))
#+end_src
** Org Roqm-ui
#+begin_src emacs-lisp
  (use-package org-roam-ui
    :straight
    (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    :after org-roam
    ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
    ;;         a hookable mode anymore, you're advised to pick something yourself
    ;;         if you don't care about startup time, use
    ;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

#+end_src
** Org roam citar
#+begin_src emacs-lisp
  (use-package citar-org-roam
    :after (citar org-roam)
    :config (citar-org-roam-mode))
#+end_src

** Org notifications
#+begin_src emacs-lisp
  (use-package org-alert
    :after org
    :init
    (setq alert-default-style 'libnotify))
#+end_src

** Org cliplink
#+begin_src emacs-lisp
  (use-package org-cliplink
    :after org
    :bind ("C-c l" . org-cliplink))
#+end_src

** Org download
#+begin_src emacs-lisp
  (use-package org-download)
#+end_src

** Org ql
#+begin_src emacs-lisp
  (use-package org-ql
    :demand t)
#+end_src

** Org crypt
#+begin_src emacs-lisp
  (use-package org-crypt
    :straight nil
    :config
    (require 'org-crypt)
    (org-crypt-use-before-save-magic)
    (setq org-tags-exclude-from-inheritance '("crypt"))
    (setq org-crypt-key nil))
#+end_src

* Mails
** Mu4e
#+begin_src emacs-lisp
  (use-package mu4e
    :demand t
    :bind (("C-x m" . mu4e))
    :custom
    (mu4e-bookmarks
    '(( :name  "Unread messages"
        :query "maildir:/INBOX AND flag:unread AND NOT flag:trashed"
        :key ?u)
      ( :name "Today's messages"
        :query "maildir:/INBOX AND date:today..now"
        :key ?t)
      ( :name "Last 7 days"
        :query "date:7d..now"
        :hide-unread t
        :key ?w)))
    :config
    (evil-define-key 'normal mu4e-headers-mode-map "T" 'mu4e-headers-mark-thread )
    (require 'mu4e-icalendar)
    (mu4e-icalendar-setup)
    (setq gnus-icalendar-org-capture-file "~/org/Inbox.org")
    (setq gnus-icalendar-org-capture-headline '("Calendar"))
    (gnus-icalendar-org-setup)
    (setq mail-user-agent 'mu4e-user-agent)
    (setq mu4e-confirm-quit nil)
    (setq mu4e-get-mail-command "mbsync -a")
    (setq mu4e-completing-read-function 'completing-read)
    (setq mu4e-change-filenames-when-moving t)
    (setq sendmail-program (executable-find "msmtp")
          send-mail-function #'smtpmail-send-it
          message-sendmail-f-is-evil t
          message-sendmail-extra-arguments '("--read-envelope-from")
          message-send-mail-function #'message-send-mail-with-sendmail)
    ;; don[t show buffer after sending
    (setq message-kill-buffer-on-exit t)
    (setq org-export-show-temporary-export-buffer nil)
    ;; set a more visible mu4e view (with dark-mode enabled)
    (setq shr-color-visible-luminance-min 100)
    ;; use imagemagick, if available
    (when (fboundp 'imagemagick-register-types)
      (imagemagick-register-types))
    (setq mu4e-use-fancy-chars t)
    (setq
     mu4e-headers-draft-mark     '("D" . "💈")
     mu4e-headers-flagged-mark   '("F" . "📍")
     mu4e-headers-new-mark       '("N" . "🔥")
     mu4e-headers-passed-mark    '("P" . "❯")
     mu4e-headers-replied-mark   '("R" . "❮")
     mu4e-headers-seen-mark      '("S" . "☑")
     mu4e-headers-trashed-mark   '("T" . "💀")
     mu4e-headers-attach-mark    '("a" . "📎")
     mu4e-headers-encrypted-mark '("x" . "🔒")
     mu4e-headers-signed-mark    '("s" . "🔑")
     mu4e-headers-unread-mark    '("u" . "⎕")
     mu4e-headers-list-mark      '("l" . "🔈")
     mu4e-headers-personal-mark  '("p" . "👨")
     mu4e-headers-calendar-mark  '("c" . "📅"))
    (setq mu4e-update-interval 60)
    (setq mu4e-drafts-folder "/[Gmail]/Drafts")
    (setq mu4e-sent-folder   "/[Gmail]/Sent Mail")
    (setq mu4e-trash-folder  "/[Gmail]/Trash")
    (setq mu4e-maildir-shortcuts
          '( (:maildir "/INBOX" :key ?i)
             (:maildir "/[Gmail]/Sent Mail"  :key ?S)
             (:maildir "/[Gmail]/Trash" :key ?t)
             (:maildir "/[Gmail]/Starred" :key ?s)))

    (add-to-list 'org-capture-templates
                 '("m" "Email Workflow"))
    (add-to-list 'org-capture-templates
                 '("mc" "Communication" entry
  		 (file+headline my/org-roam-node-find-project "Communication")
                   "* TODO Communication from %:fromname on %a"
  		 :immediate-finish t))
    (add-to-list 'org-capture-templates
                 '("mr" "Read Later" entry
  		 (file+headline "~/org/to_read_to_watch.org"
  				"To watch or read")
                   "* TODO Read %:subject\nSCHEDULED:%t\nDEADLINE: %(org-insert-time-stamp (org-read-date nil t \"+2d\"))\n\n%a\n\n%i"
  		 :immediate-finish t))
    ;; template to capture events
    (add-to-list 'org-capture-templates
                 '("#" "used by gnus-icalendar-org" entry
  		 (file+headline my/org-roam-node-find-project
  				"Dates")
  		 "%i")) ;; don't immdeiate-finsh want to be able to set a todo
    (require 'org-roam)
    (defun my/org-roam-node-find-project ()
      "Get path for node"
      (org-roam-node-file (org-roam-node-read nil (my/org-roam-filter-by-tag "Project"))))

    (defun my/capture-mail-follow-up (msg)
      (interactive)
      (call-interactively 'org-store-link)
      (org-capture nil "mc")
      (mu4e-view-mark-for-flag))


    (defun my/capture-mail-read-later (msg)
      (interactive)
      (call-interactively 'org-store-link)
      (org-capture nil "mr"))

    ;; Add custom actions for our capture templates
    (add-to-list 'mu4e-headers-actions
                 '("fCommunication" . my/capture-mail-follow-up) t)
    (add-to-list 'mu4e-view-actions
                 '("fCommunication" . my/capture-mail-follow-up) t)
    (add-to-list 'mu4e-headers-actions
                 '("read later" . my/capture-mail-read-later) t)
    (add-to-list 'mu4e-view-actions
                 '("read later" . my/capture-mail-read-later) t)

    (setq mu4e-org-contacts-file "/home/willefi/org/contacts.org")
    (add-to-list 'mu4e-headers-actions
                 '("org-contact-add" . mu4e-action-add-org-contact) t)
    (add-to-list 'mu4e-view-actions
                 '("org-contact-add" . mu4e-action-add-org-contact) t))
#+end_src
*** Mu4e contrib
#+begin_src emacs-lisp
  (use-package mu4e-contrib
    :straight nil)
#+end_src

** Org message
#+begin_src emacs-lisp
  (use-package org-msg
    :demand t
    :after mu4e
    :config
    (setq org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t"
          org-msg-startup "hidestars indent inlineimages"
          org-msg-greeting-fmt "\nHi%s,\n\n"
          org-msg-recipient-names '(("frederic.willem@gmail.com" . "Frédéric"))
          org-msg-greeting-name-limit 3
          org-msg-default-alternatives '((new		. (text html))
                                         (reply-to-html	. (text html))
                                         (reply-to-text	. (text)))
          org-msg-convert-citation t )
    (setq org-msg-signature "\n\nRegards,\n\n\n--\n\n*Frédéric Willem*\n/Tel: +32 456 64 00 02/\n")
    (org-msg-mode))

#+end_src

** org contacts
#+begin_src emacs-lisp
  (use-package org-contacts
    :demand t
    :after org-msg
    :hook (org-msg-edit-mode . org-contacts-setup-completion-at-point)
    :custom
    (org-contacts-files '("~/org/contacts.org"))
    :config
    (add-to-list 'org-capture-templates
                 '("c" "Contacts" entry (file "~/org/contacts.org")
  		 "* %(org-contacts-template-name)
  :PROPERTIES:
  :EMAIL: %(org-contacts-template-email)
  :PHONE:
  :ALIAS:
  :NICKNAME:
  :IGNORE:
  :ICON:
  :NOTE:
  :ADDRESS:
  :BIRTHDAY:
  :END:")))
#+end_src

** PDF Tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :init
    (pdf-loader-install))
#+end_src

* Calendars
** Calendar
#+begin_src emacs-lisp
  (use-package  password-store)
#+end_src
#+begin_src emacs-lisp
  (use-package calfw)

  (use-package calfw-org
    :bind ("C-c c" . cfw:open-org-calendar))
#+end_src

** Holidays calendar
#+begin_src emacs-lisp
  (require 'calendar)
  (setq calendar-week-start-day 1)
  (require 'holidays)
  (setq calendar-christian-all-holidays-flag t)
  (setq calendar-holidays '((holiday-fixed 1 1 "New Year's Day")
  			  (holiday-fixed 2 2 "Groundhog Day")
                            (holiday-fixed 2 14 "Valentine's Day")
                            (holiday-fixed 3 17 "St. Patrick's Day")
                            (holiday-fixed 4 1 "April Fools' Day")
                            (holiday-float 5 0 2 "Mother's Day")
                            (holiday-float 6 0 3 "Father's Day")
                            (holiday-fixed 7 21 "Belgium National Day")
                            (holiday-fixed 10 31 "Halloween")
                            (holiday-fixed 11 11 "Veteran's Day")
                            (holiday-float 11 4 4 "Thanksgiving")
                            (holiday-easter-etc)
                            (holiday-fixed 12 25 "Christmas")
                            (if calendar-christian-all-holidays-flag
                                (append
                                 (holiday-fixed 1 6 "Epiphany")
                                 (holiday-julian 12 25 "Christmas (Julian calendar)")
                                 (holiday-greek-orthodox-easter)
                                 (holiday-fixed 8 15 "Assumption")
                                 (holiday-advent 0 "Advent")))
                            (solar-equinoxes-solstices)
                            (holiday-sexp calendar-daylight-savings-starts
  					(format "Daylight Saving Time Begins %s"
  						(solar-time-string
  						 (/ calendar-daylight-savings-starts-time
                                                      (float 60))
  						 calendar-standard-time-zone-name)))
                            (holiday-sexp calendar-daylight-savings-ends
  					(format "Daylight Saving Time Ends %s"
  						(solar-time-string
  						 (/ calendar-daylight-savings-ends-time

  						    (float 60))
  						 calendar-daylight-time-zone-name)))))
  (setq calendar-latitude 50.63)
  (setq calendar-longitude 5.58)
#+end_src

** Org-gcal
#+begin_src emacs-lisp
  (use-package org-gcal
    :bind (:map org-mode-map
                ("C-c g" . org-gcal-post-at-point))
    :init
    (setq org-gcal-notify-p nil)
    (require 'plstore)
    (add-to-list 'plstore-encrypt-to "E7446C9175DAAA79")
    (setq client-secret (password-store-get 'calendar))
    (setq org-gcal-client-id "140991280434-1736v7des240n016cqe46cuof13ggvbc.apps.googleusercontent.com"
    	org-gcal-client-secret client-secret
    	org-gcal-fetch-file-alist '(("frederic.willem@gmail.com" .  "~/org/calendar.org"))))
#+end_src

* Programming
** Error checking
#+begin_src emacs-lisp
  (use-package flycheck
    :hook (prog-mode . flycheck-mode))

#+end_src

** Compilation mode
Setup ansi colors for the compilation buffer
#+begin_src emacs-lisp
  (use-package xterm-color
    :config
    (setq compilation-environment '("TERM=xterm-256color"))

    (defun my/advice-compilation-filter (f proc string)
      (funcall f proc (xterm-color-filter string)))

    (advice-add 'compilation-filter :around #'my/advice-compilation-filter) )
#+end_src

** Java + Lsp
#+begin_src emacs-lisp
  (use-package lsp-mode
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :hook ((java-mode . lsp)
  	 (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  (use-package lsp-java )
  ;; optionally
  (use-package lsp-ui :commands lsp-ui-mode)
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

  ;; optionally if you want to use debugger
  (use-package dap-mode)
  (use-package dap-java :straight nil)

#+end_src

* scratch
#+begin_src emacs-lisp

  (use-package sqlite3)
#+end_src

* Footer
#+begin_src emacs-lisp
  (provide 'init)
  ;; Local Variables:
  ;; byte-compile-warnings: (not free-vars)
  ;; End:
  ;;; init.el ends here (emacs-lisp-checkdoc)
#+end_src

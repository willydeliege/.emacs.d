#+TITLE: Emacs literate configuration
#+PROPERTY: header-args :tangle init.el
#+OPTIONS: toc:2 num:nil
#+auto_tangle: t
* Emacs configuration
After spending lot of time with doom emacs, willing to switch to a more native emacs config while keeping evil mode
* Header
Header for the config init.el file
#+begin_src emacs-lisp
  ;;; init.el --- Willydeliege's Emacs configuration -*- lexical-binding: t -*-

  ;; Copyright (C) 2023 Frédéric Willem

  ;; Author: Frédéric Willem <frederic.willem@gmail.com>
  ;; Keywords: internal

  ;;; Commentary:
  ;; A fully fledged, reproducible Emacs configuration

  ;;; Code:
#+end_src
* Package manager
Using [[https://github.com/radian-software/straight.el#getting-started][straight]] as package manager
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src
** Using straight properly with initiating in early-init.el
This will prevent to use package.el
#+begin_src emacs-lisp :tangle early-init.el
    ;;; early-init.el --- Emacs early init file
    ;;; Commentary:
  ;; Code to run before init.el is loaded.
    ;;; Code:

  ;; Disable package.el
  (setq package-enable-at-startup nil)
  ;; start emacs window maximized
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (setq warning-minimum-level :emergency)
  ;;disable splash screen and startup message
  (setq inhibit-startup-message t) 
  (setq initial-scratch-message nil)

  (provide 'early-init)
	;;; early-init.el ends here
#+end_src
** USE-PACKAGE
We will use use-package
#+begin_src emacs-lisp
  (straight-use-package 'use-package)
#+end_src
and use straight by default
#+begin_src emacs-lisp
  (setq straight-use-package-by-default t)
#+end_src
* Defaults
#+begin_src emacs-lisp
  ;; Save the last place edited in files
  (save-place-mode 1) 
  (setq save-place-file (locate-user-emacs-file "places" ".emacs-places"))
  (setq save-place-forget-unreadable-files nil)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
  (setq recentf-max-saved-items 25)
#+end_src
* Personal information
#+begin_src emacs-lisp 
  (setq user-full-name "Frédéric Willem"
	user-mail-address "frederic.willem@gmail.com")
#+end_src
* UI
** Theme
#+begin_src emacs-lisp
  (use-package ef-themes
    :ensure t
    :config
    ;; If you like two specific themes and want to switch between them, you
    ;; can specify them in `ef-themes-to-toggle' and then invoke the command
    ;; `ef-themes-toggle'.  All the themes are included in the variable
    ;; `ef-themes-collection'.

    (setq ef-themes-headings ; read the manual's entry or the doc string
	  '((0 . (variable-pitch light 1.9))
	    (1 . (variable-pitch light 1.8))
	    (2 . (variable-pitch regular 1.7))
	    (3 . (variable-pitch regular 1.6))
	    (4 . (variable-pitch regular 1.5))
	    (5 . (variable-pitch 1.4)) ; absence of weight means `bold'
	    (6 . (variable-pitch 1.3))
	    (7 . (variable-pitch 1.2))
	    (t . (variable-pitch 1.1))))

    ;; They are nil by default...
    (setq ef-themes-mixed-fonts t
	  ef-themes-variable-pitch-ui t)

    ;; Read the doc string or manual for this one.  The symbols can be
    ;; combined in any order.
    (setq ef-themes-region '(intense no-extend neutral))

    ;; Disable all other themes to avoid awkward blending:
    (mapc #'disable-theme custom-enabled-themes)

    ;; Load the theme of choice:
    (load-theme 'ef-dark :no-confirm))
#+end_src
** Modeline
*** Nerd Icons
#+begin_src emacs-lisp
  (use-package nerd-icons
    ;; :custom
    ;; The Nerd Font you want to use in GUI
    ;; "Symbols Nerd Font Mono" is the default and is recommended
    ;; but you can use any other Nerd Font if you want
    ;; (nerd-icons-font-family "Symbols Nerd Font Mono")
    )
#+end_src
*** Doom-modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode))
#+end_src
* Editing
** Evil mode
Usage of evil mode as I used to work with vim binding for years
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))
#+end_src
** Which-key
When you can't remember all keybindings
#+begin_src emacs-lisp
  (use-package which-key
    :after evil
    :ensure t
    :hook (after-init . which-key-mode)
    :custom
    (which-key-allow-evil-operators t)
    (which-key-use-C-h-commands nil)
    (which-key-idle-delay 0.4))
#+end_src

** Smartparens
#+begin_src emacs-lisp
  (use-package smartparens
    :ensure t
    :init
    (smartparens-global-mode 1))
#+end_src
** Evil commentary
#+begin_src emacs-lisp
  (use-package evil-commentary
    :ensure t
    :init
    (evil-commentary-mode))
#+end_src
* Completion
** Vertico + Marginalia
#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :bind (:map vertico-map
		("C-j" . vertico-next)
		("C-k" . vertico-previous)
		("C-f" . vertico-exit)
		:map minibuffer-local-map
		("C-h" . backward-kill-word))
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))

  (use-package savehist
    :init
    (savehist-mode))

  (use-package marginalia
    :after vertico
    :ensure t
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))
#+end_src
** Consult
#+begin_src emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
	   ("C-c M-x" . consult-mode-command)
	   ("C-c h" . consult-history)
	   ("C-c k" . consult-kmacro)
	   ;; ("C-c m" . consult-man)
	   ("C-c i" . consult-info)
	   ([remap Info-search] . consult-info)
	   ;; C-x bindings in `ctl-x-map'
	   ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
	   ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
	   ("C-x C-r" . consult-recent-file)        ;; orig. recent-files-read-only
	   ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
	   ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
	   ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
	   ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
	   ;; Custom M-# bindings for fast register access
	   ("M-#" . consult-register-load)
	   ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
	   ("C-M-#" . consult-register)
	   ;; Other custom bindings
	   ("M-y" . consult-yank-pop)                ;; orig. yank-pop
	   ;; M-g bindings in `goto-map'
	   ("M-g e" . consult-compile-error)
	   ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
	   ("M-g g" . consult-goto-line)             ;; orig. goto-line
	   ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
	   ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
	   ("M-g m" . consult-mark)
	   ("M-g k" . consult-global-mark)
	   ("M-g i" . consult-imenu)
	   ("M-g I" . consult-imenu-multi)
	   ;; M-s bindings in `search-map'
	   ("M-s d" . consult-find)
	   ("M-s D" . consult-locate)
	   ("M-s g" . consult-grep)
	   ("M-s G" . consult-git-grep)
	   ("M-s r" . consult-ripgrep)
	   ("M-s l" . consult-line)
	   ("M-s L" . consult-line-multi)
	   ("M-s k" . consult-keep-lines)
	   ("M-s u" . consult-focus-lines)
	   ;; Isearch integration
	   ("M-s e" . consult-isearch-history)
	   :map isearch-mode-map
	   ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
	   ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
	   ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
	   ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
	   ;; Minibuffer history
	   :map minibuffer-local-map
	   ("M-s" . consult-history)                 ;; orig. next-matching-history-element
	   ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
	  register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
	  xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 3. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    ;;;; 4. projectile.el (projectile-project-root)
    (autoload 'projectile-project-root "projectile")
    (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 5. No project support
    ;; (setq consult-project-function nil)
    )
#+end_src
** Embark
#+begin_src emacs-lisp
  (use-package embark
    :ensure t
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
    ;; strategy, if you want to see the documentation from multiple providers.
    (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
		 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		   nil
		   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** Orderless
#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src
** Company
#+begin_src emacs-lisp
  (use-package company
    :hook ((prog-mode text-mode org-mode) . company-mode)
    :ensure t
    :bind (:map company-active-map
		("C-j" . company-select-next)
		("C-k" . company-select-previous))
    :config
    (setq company-backends
	  '((company-capf company-files :with company-yasnippet)))
    (setq company-minimum-prefix-length 2)
    (setq company-idle-delay 0.3))
  ;; prettify completion styles
  (use-package company-box
    :ensure t
    :hook (company-mode . company-box-mode))
#+end_src
** Snippets
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1))
  (use-package yasnippet-snippets
    :ensure t
    :after yasnippet)
  (use-package doom-snippets
    :after yasnippet
    :ensure t
    :straight (doom-snippets :type git :host github :repo "doomemacs/snippets" :files ("*.el" "*"))) 
#+end_src

* Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (projectile-mode +1)
    :bind (:map projectile-mode-map
		("C-c p" . projectile-command-map)))
#+end_src

* Org mode
#+begin_src emacs-lisp
  (use-package org
    :straight
    (:type built-in)
    :bind (("C-c a" . org-agenda))
    :config
    (setq org-agenda-files '("~/org/")) 
    (setq org-stuck-projects '("+Project/PROJ" ("NEXT" "WAIT") nil ""))
    (setq org-todo-keywords
	  '((sequence
	     "TODO(t)"  ; A task that needs doing & is ready to do
	     "NEXT(n)"  ; The nex task in to perform in the project
	     "MEETING"  ; Meeting
	     "PROJ(p)"  ; A project, which usually contains other tasks
	     "WAIT(W@)"  ; Something external is holding up this task
	     "HOLD(H@)"  ; This task is paused/on hold because of me
	     "IDEA(i)"  ; An unconfirmed and unapproved task or notion
	     "|"
	     "DONE(d!)"  ; Task successfully completed
	     "KILL(k)") ; Task was cancelled, aborted or is no longer applicable
	    (sequence
	     "[ ](T)"   ; A task that needs doing
	     "[-](S)"   ; Task is in progress
	     "|"
	     "[X](D)")  ; Task was completed
	    (sequence
	     "READ(r)"
	     "WATCH(w)"))
	  org-todo-keyword-faces
	  '(("[-]"  . +org-todo-active)
	    ("NEXT"  . +org-todo-active)
	    ("WAIT" . +org-todo-onhold)
	    ("HOLD" . +org-todo-onhold)
	    ("PROJ" . +org-todo-project)
	    ("NO"   . +org-todo-cancel)
	    ("KILL" . +org-todo-cancel))))

#+end_src
** Org-agenda
#+begin_src emacs-lisp
  (use-package org-super-agenda
    :config
    (setq org-agenda-custom-commands
	  '(("z" "My view"
	     (   (agenda "" ((org-agenda-span 'day)
			     (org-agenda-start-day nil)
			     (org-super-agenda-groups
			      '((:name "Today"
				       :time-grid t
				       :date today
				       :deadline today
				       :scheduled today
				       :order 1)))))
		 (alltodo "" ((org-agenda-overriding-header "")
			      (org-super-agenda-groups
			       '(;; Each group has an implicit boolean OR operator between its selectors.
				 (:name "Today"
					:deadline today
					:face (:background "black"))
				 (:name "Passed deadline"
					:and (:deadline past :todo ("TODO" "WAIT" "HOLD" "NEXT"))
					:face (:background "#7f1b19"))
				 (:name "Important"
					:priority "A")
				 (:priority<= "B"
					      ;; Show this section after "Today" and "Important", because
					      ;; their order is unspecified, defaulting to 0. Sections
					      ;; are displayed lowest-number-first.
					      :order 1)
				 (:name "Next"
					:todo "NEXT"
					:order 8)
				 (:name "Waiting"
					:todo "WAIT"
					:order 9)
				 (:name "On hold"
					:todo "HOLD"
					:order 10)
				 (:discard (:todo "PROJ"))))))))))
    (add-hook 'org-agenda-mode-hook 'org-super-agenda-mode))
#+end_src
** Org auto tangle
#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :ensure t
    :hook (org-mode . org-auto-tangle-mode))
#+end_src
** Org modern
Prettify org mode
#+begin_src emacs-lisp
  (use-package org-modern
    :after org
    :hook ((org-mode . org-modern-mode)
	   (org-agenda-finalize . org-modern-agenda))
    :config
    (setq
     ;; Edit settings
     org-auto-align-tags nil
     org-tags-column 0
     org-catch-invisible-edits 'show-and-error
     org-special-ctrl-a/e t
     org-insert-heading-respect-content t

     ;; Org styling, hide markup etc.
     org-hide-emphasis-markers t
     org-pretty-entities t
     org-ellipsis "…"

     ;; Agenda styling
     org-agenda-tags-column 0
     org-agenda-block-separator ?─
     org-agenda-time-grid
     '((daily today require-timed)
       (800 1000 1200 1400 1600 1800 2000)
       " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
     org-agenda-current-time-string
     "⭠ now ─────────────────────────────────────────────────"))
#+end_src
** org roaom
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :init
    (org-roam-db-autosync-mode)
    (require 'org-roam-dailies)
    :custom
    (org-roam-directory "~/org/")
    (org-roam-completion-everywhere t)
    (org-roam-dailies-directory "~/org/daily/")
    :bind (("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n i" . org-roam-node-insert)
	   :map org-mode-map
	   ("C-M-i" . completion-at-point))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (setq org-roam-capture-templates '(("d" "default" plain "%?"
					:if-new (file+head "${slug}.org"
							   "#+TITLE: ${title}\n#+DATE: %T\n")
					:unnarrowed t))))
  (which-key-add-key-based-replacements
    "C-c n d" "org-dailies")
#+end_src
* Mails
#+begin_src emacs-lisp
  (use-package mu4e
    :defer 20
    :straight '(mu4e :load-path  "/usr/local/share/emacs/site-lisp/mu4e/*.el")
    :bind (("C-c m" . mu4e))
    :config

    (setq mu4e-get-mail-command "mbsync -a")
    (require 'mu4e-icalendar)
    (mu4e-icalendar-setup)
    (setq gnus-icalendar-org-capture-file "~/org/Inbox.org")
    (setq gnus-icalendar-org-capture-headline '("Calendar"))
    (gnus-icalendar-org-setup)
    (setq +org-capture-emails-file "Inbox.org")
    (setq sendmail-program (executable-find "msmtp")
	  send-mail-function #'smtpmail-send-it
	  message-sendmail-f-is-evil t
	  message-sendmail-extra-arguments '("--read-envelope-from")
	  message-send-mail-function #'message-send-mail-with-sendmail)
    ;; set a more visible mu4e view (with dark-mode enabled)
    (setq shr-color-visible-luminance-min 60)
    ;; use imagemagick, if available
    (when (fboundp 'imagemagick-register-types)
      (imagemagick-register-types))
    (setq mu4e-use-fancy-chars t)
    (setq
     mu4e-headers-draft-mark     '("D" . "💈")
     mu4e-headers-flagged-mark   '("F" . "📍")
     mu4e-headers-new-mark       '("N" . "🔥")
     mu4e-headers-passed-mark    '("P" . "❯")
     mu4e-headers-replied-mark   '("R" . "❮")
     mu4e-headers-seen-mark      '("S" . "☑")
     mu4e-headers-trashed-mark   '("T" . "💀")
     mu4e-headers-attach-mark    '("a" . "📎")
     mu4e-headers-encrypted-mark '("x" . "🔒")
     mu4e-headers-signed-mark    '("s" . "🔑")
     mu4e-headers-unread-mark    '("u" . "⎕")
     mu4e-headers-list-mark      '("l" . "🔈")
     mu4e-headers-personal-mark  '("p" . "👨")
     mu4e-headers-calendar-mark  '("c" . "📅"))
    (setq mu4e-update-interval 60)
    (setq mu4e-maildir-shortcuts
	  '( (:maildir "/INBOX" :key ?i)
	     (:maildir "/[Gmail]/Sent Mail"  :key ?S)
	     (:maildir "/[Gmail]/Trash" :key ?t)
	     (:maildir "/[Gmail]/Starred" :key ?s)
	     (:maildir "/[Gmail]/All Mail"   :key ?a)))

    (add-to-list 'org-capture-templates
		 '("M" "Email Workflow"))
    (add-to-list 'org-capture-templates
		 '("Mf" "Follow Up" entry (file+olp "~/org/Inbox.org" "Follow Up")
		   "* TODO Follow up with %:fromname on %a\nSCHEDULED:%t\nDEADLINE: %(org-insert-time-stamp (org-read-date nil t \"+2d\"))\n\n%i" :immediate-finish t))
    (add-to-list 'org-capture-templates
		 '("Mr" "Read Later" entry (file+olp "~/org/Inbox.org" "Read Later")
		   "* TODO Read %:subject\nSCHEDULED:%t\nDEADLINE: %(org-insert-time-stamp (org-read-date nil t \"+2d\"))\n\n%a\n\n%i" :immediate-finish t))

    (defun my/capture-mail-follow-up (msg)
      (interactive)
      (call-interactively 'org-store-link)
      (org-capture nil "Mf"))

    (defun my/capture-mail-read-later (msg)
      (interactive)
      (call-interactively 'org-store-link)
      (org-capture nil "Mr"))

    ;; Add custom actions for our capture templates
    (add-to-list 'mu4e-headers-actions
		 '("follow up" . my/capture-mail-follow-up) t)
    (add-to-list 'mu4e-view-actions
		 '("follow up" . my/capture-mail-follow-up) t)
    (add-to-list 'mu4e-headers-actions
		 '("read later" . my/capture-mail-read-later) t)
    (add-to-list 'mu4e-view-actions
		 '("read later" . my/capture-mail-read-later) t)
    (setq org-msg-signature "\n\nRegards,\n\n\n--\n\n*Frédéric Willem*\n\n/Tel: +32 456 64 00 02/\n")
    (autoload 'bbdb-insinuate-mu4e "bbdb-mu4e")
    (bbdb-initialize 'message 'mu4e)

    (setq bbdb-mail-user-agent 'mu4e-user-agent)
    (setq mu4e-view-rendered-hook 'bbdb-mua-auto-update)
    (setq mu4e-compose-complete-addresses nil)
    (setq bbdb-mua-pop-up t)
    (setq bbdb-mua-pop-up-window-size 5)
    (setq mu4e-org-contacts-file "/home/willefi/org/contacts.org")
    (add-to-list 'mu4e-headers-actions
		 '("org-contact-add" . mu4e-action-add-org-contact) t)
    (add-to-list 'mu4e-view-actions
		 '("org-contact-add" . mu4e-action-add-org-contact) t))
#+end_src
* Version control
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-x g" . magit-status)
	   ("C-x C-g" . magit-status)))

  (use-package git-gutter
    :init
    (global-git-gutter-mode 1)
    :config
    (setq git-gutter:update-interval 0.02))

  (use-package git-gutter-fringe
    :config
    (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))
  #+end_src

* Programming
#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))

#+end_src
